{"version":3,"file":"index.js","sources":["../node_modules/dlib/utils/Signal.js","../node_modules/dlib/utils/Ticker.js","../node_modules/dlib/customelements/LoopElement.js","../node_modules/gl-matrix/src/gl-matrix/common.js","../node_modules/gl-matrix/src/gl-matrix/vec2.js","../node_modules/dlib/math/Vector2.js","../node_modules/dlib/input/Pointer.js","../node_modules/gl-matrix/src/gl-matrix/mat4.js","../node_modules/dlib/math/Matrix4.js","../node_modules/gl-matrix/src/gl-matrix/vec3.js","../node_modules/dlib/math/Vector3.js","../node_modules/gl-matrix/src/gl-matrix/mat3.js","../node_modules/gl-matrix/src/gl-matrix/vec4.js","../node_modules/gl-matrix/src/gl-matrix/quat.js","../node_modules/dlib/math/Quaternion.js","../node_modules/dlib/3d/controllers/TrackballController.js","../node_modules/dlib/three/THREETrackballController.js","../src/main/Scene.js","../node_modules/dlib/three/THREERenderer.js","../node_modules/dlib/3d/Shader.js","../node_modules/dlib/three/THREEShader.js","../node_modules/dlib/three/THREEShaderMaterial.js","../node_modules/dlib/shaders/AntialiasGLSL.js","../src/main/Renderer.js","../src/main/index.js"],"sourcesContent":["export default class Signal extends Set {\n  constructor() {\n    super();\n\n    this._onceCallbacksMap = new Map();\n  }\n\n  add(value, {once = false} = {}) {\n    if(once) {\n      const onceCallbackWrapper = () => {\n        value(...arguments);\n        this.delete(value);\n      };\n      this._onceCallbacksMap.set(value, onceCallbackWrapper);\n      super.add(onceCallbackWrapper);\n    } else {\n      super.add(value);\n    }\n  }\n\n  delete(value) {\n    super.delete(this._onceCallbacksMap.get(value) || value);\n    this._onceCallbacksMap.delete(value);\n  }\n\n  dispatch(value) {\n    for (let callback of this) {\n      callback(value);\n    }\n  }\n}\n","import Signal from \"./Signal.js\";\n\nclass Ticker extends Signal {\n  constructor() {\n    super();\n    \n    this._updateBinded = this._update.bind(this);\n\n    this.time = window.performance.now() * .001;\n    this._previousTime = this.time;\n    this.deltaTime = 0;\n    this.timeScale = 1;\n\n    this._update();\n  }\n\n  _update() {\n    requestAnimationFrame(this._updateBinded);\n\n    this.time = window.performance.now() * 0.001;\n    this.deltaTime = this.time - this._previousTime;\n    this.timeScale = this.deltaTime / .0166666667;\n    this._previousTime = this.time;\n\n    this.dispatch();\n  }\n}\n\nexport default new Ticker();\n","import Ticker from \"../utils/Ticker.js\";\n\nexport default class LoopElement extends HTMLElement {\n  constructor({autoplay = false, background = false} = {}) {\n    super();\n    this._autoplay = autoplay || this.hasAttribute(\"autoplay\");\n    this._background = background || this.hasAttribute(\"background\");\n\n    this.paused = true;\n    this._pausedByBlur = false;\n\n    this._updateBinded = this.update.bind(this);\n  }\n\n  connectedCallback() {\n    if(!this._background) {\n      window.top.addEventListener(\"blur\", this._onBlur = () => {\n        this._pausedByBlur = !this.paused;\n        this.pause();\n      });\n      window.top.addEventListener(\"focus\", this._onFocus = () => {\n        if(this._pausedByBlur) {\n          this.play();\n        }\n      });\n    }\n    if((window.top.document.hasFocus() || this._background) && this._autoplay) {\n      this.play();\n    } else if (this._autoplay) {\n      this._pausedByBlur = true;\n      requestAnimationFrame(this._updateBinded);\n    }\n  }\n\n  disconnectedCallback() {\n    this.pause();\n    window.top.removeEventListener(\"blur\", this._onBlur);\n    window.top.removeEventListener(\"focus\", this._onFocus);\n  }\n\n  play() {\n    this.paused = false;\n    this._pausedByBlur = false;\n    Ticker.add(this._updateBinded);\n    this.dispatchEvent(new Event(\"playing\"));\n  }\n\n  pause() {\n    this.paused = true;\n    Ticker.delete(this._updateBinded);\n    this.dispatchEvent(new Event(\"pause\"));\n  }\n\n  update() {}\n}\n\nwindow.customElements.define(\"dlib-loop\", LoopElement);\n","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n","import * as vec2 from \"../../gl-matrix/src/gl-matrix/vec2.js\";\r\n\r\nexport default class Vector2 extends Float32Array {\r\n  static distance(vector2a, vector2b) {\r\n    return vec2.distance(vector2a, vector2b);\r\n  }\r\n\r\n  constructor(array = [0, 0]) {\r\n    super(array);\r\n    return this;\r\n  }\r\n\r\n  get x() {\r\n    return this[0];\r\n  }\r\n\r\n  set x(value) {\r\n    this[0] = value;\r\n  }\r\n\r\n  get y() {\r\n    return this[1];\r\n  }\r\n\r\n  set y(value) {\r\n    this[1] = value;\r\n  }\r\n\r\n  set(x, y) {\r\n    vec2.set(this, x, y);\r\n    return this;\r\n  }\r\n\r\n  copy(vector2) {\r\n    vec2.copy(this, vector2);\r\n    return this;\r\n  }\r\n\r\n  add(vector2) {\r\n    vec2.add(this, this, vector2);\r\n    return this;\r\n  }\r\n\r\n  get size() {\r\n    return vec2.length(this);\r\n  }\r\n\r\n  get squaredSize() {\r\n    return vec2.squaredLength(this);\r\n  }\r\n\r\n  subtract(vector2) {\r\n    vec2.subtract(this, this, vector2);\r\n    return this;\r\n  }\r\n\r\n  negate(vector2 = this) {\r\n    vec2.negate(this, vector2);\r\n    return this;\r\n  }\r\n\r\n  cross(vector2a, vector2b) {\r\n    vec2.cross(this, vector2a, vector2b);\r\n    return this;\r\n  }\r\n\r\n  scale(value) {\r\n    vec2.scale(this, this, value);\r\n    return this;\r\n  }\r\n\r\n  normalize() {\r\n    vec2.normalize(this, this);\r\n  }\r\n\r\n  dot(vector2) {\r\n    return vec2.dot(this, vector2);\r\n  }\r\n\r\n  distance(vector2) {\r\n    return Vector2.distance(this, vector2);\r\n  }\r\n\r\n  equals(vector2) {\r\n    return vec2.exactEquals(this, vector2);\r\n  }\r\n\r\n  applyMatrix3(matrix3) {\r\n    vec2.transformMat3(this, this, matrix3);\r\n    return this;\r\n  }\r\n\r\n  applyMatrix4(matrix4) {\r\n    vec2.transformMat4(this, this, matrix4);\r\n    return this;\r\n  }\r\n\r\n  lerp(vector2, value) {\r\n    vec2.lerp(this, this, vector2, value);\r\n  }\r\n\r\n  clone() {\r\n    return new Vector2(this);\r\n  }\r\n}\r\n","import Vector2 from \"../math/Vector2.js\";\nimport Signal from \"../utils/Signal.js\";\nimport Ticker from \"../utils/Ticker.js\";\n\nlet pointers = new Map();\n\nexport default class Pointer extends Vector2 {\n  static get TOUCH_TYPE() {\n    return \"touchtype\";\n  }\n\n  static get MOUSE_TYPE() {\n    return \"mousetype\";\n  }\n\n  static get(domElement = window) {\n    let pointer = pointers.get(domElement);\n    if (!pointer) {\n      pointer = new Pointer(domElement);\n    }\n    return pointer;\n  }\n\n  get downed() {\n    return this._downed;\n  }\n\n  constructor(domElement = window) {\n    super();\n\n    this._domElement = domElement;\n\n    this.type = Pointer.TOUCH_TYPE;\n\n    this.velocity = new Vector2();\n    this.dragOffset = new Vector2();\n\n    this.centered = new Vector2();\n    this.centeredFlippedY = new Vector2();\n    this.normalized = new Vector2();\n    this.normalizedFlippedY = new Vector2();\n    this.normalizedCentered = new Vector2();\n    this.normalizedCenteredFlippedY = new Vector2();\n\n    this._downed = false;\n\n    pointers.set(this._domElement, this);\n\n    this.onDown = new Signal();\n    this.onMove = new Signal();\n    this.onUp = new Signal();\n    this.onClick = new Signal();\n    this.onTypeChange = new Signal();\n\n    this._preventMouseTypeChange = false;\n\n    this._onPointerMoveBinded = this._onPointerMove.bind(this);\n    this._onPointerDownBinded = this._onPointerDown.bind(this);\n    this._onPointerUpBinded = this._onPointerUp.bind(this);\n\n    this._updateBinded = this._update.bind(this);\n    this._resizeBinded = this.resize.bind(this);\n\n    this.resize();\n\n    this._position = new Vector2();\n\n    this.enable();\n  }\n\n  resize() {\n    this._domElementBoundingRect = this._domElement === window ? {\n      left: 0,\n      top: 0,\n      width: window.innerWidth,\n      height: window.innerHeight\n    } : this._domElement.getBoundingClientRect();\n  }\n\n  _onPointerDown(e) {\n    if(e.type === \"touchstart\") {\n      this._preventMouseTypeChange = true;\n      this._changeType(Pointer.TOUCH_TYPE);\n    }\n    this._downed = true;\n    this.dragOffset.set(0, 0);\n    this.copy(this._position);\n    this._onPointerEvent(e);\n    this._updatePositions();\n    this.onDown.dispatch(e);\n  }\n\n  _onPointerMove(e) {\n    if(e.type === \"mousemove\") {\n      if(this._preventMouseTypeChange) {\n        return;\n      } else {\n        this._changeType(Pointer.MOUSE_TYPE);\n      }\n    }\n    this._onPointerEvent(e);\n    this.onMove.dispatch(e);\n  }\n\n  _onPointerUp(e) {\n    if(!this._downed) {\n      return;\n    }\n    this._downed = false;\n    this._onPointerEvent(e);\n    this._updatePositions();\n    this.onUp.dispatch(e);\n    if(this.dragOffset.length < 4) {\n      this.onClick.dispatch(e);\n    }\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => {\n      this._preventMouseTypeChange = false;\n    }, 2000);\n  }\n\n  _onPointerEvent(e) {\n    if (!!window.TouchEvent && e instanceof window.TouchEvent) {\n      if(e.type === \"touchend\") {\n        e = e.changedTouches[0];\n      } else {\n        e = e.touches[0];\n      }\n    }\n    this._position.x = e.clientX - this._domElementBoundingRect.left;\n    this._position.y = e.clientY - this._domElementBoundingRect.top;\n  }\n\n  _changeType(type) {\n    if(this.type === type) {\n      return;\n    }\n    this.type = type;\n    this.disable();\n    this.enable();\n    this.onTypeChange.dispatch(this.type);\n  }\n\n  _update() {\n    if(this.x || this.y) {\n      this.velocity.x = this._position.x - this.x;\n      this.velocity.y = this._position.y - this.y;\n      if(this.downed) {\n        this.dragOffset.add(this.velocity);\n      }\n    }\n\n    this._updatePositions();\n  }\n\n  _updatePositions() {\n    this.x = this._position.x;\n    this.y = this._position.y;\n\n    if(!this.x && !this.y) {\n      return;\n    }\n\n    this.centered.x = this.centeredFlippedY.x = this.x - this._domElementBoundingRect.width * .5;\n    this.centered.y = this.centeredFlippedY.y = this.y - this._domElementBoundingRect.height * .5;\n    this.centeredFlippedY.y *= -1;\n\n    this.normalized.x = this.normalizedFlippedY.x = this.x / this._domElementBoundingRect.width;\n    this.normalized.y = this.normalizedFlippedY.y = this.y / this._domElementBoundingRect.height;\n    this.normalizedFlippedY.y = 1 - this.normalizedFlippedY.y;\n\n    this.normalizedCentered.x = this.normalizedCenteredFlippedY.x = this.normalized.x * 2 - 1;\n    this.normalizedCentered.y = this.normalizedCenteredFlippedY.y = this.normalized.y * 2 - 1;\n    this.normalizedCenteredFlippedY.y *= -1;\n  }\n\n  enable() {\n    this.disable();\n    this.resize();\n    if(this.type === Pointer.TOUCH_TYPE) {\n      this._domElement.addEventListener(\"touchmove\", this._onPointerMoveBinded);\n      window.addEventListener(\"touchend\", this._onPointerUpBinded);\n    }\n    else {\n      this._domElement.addEventListener(\"mousedown\", this._onPointerDownBinded);\n      window.addEventListener(\"mouseup\", this._onPointerUpBinded);\n    }\n    this._domElement.addEventListener(\"touchstart\", this._onPointerDownBinded);\n    this._domElement.addEventListener(\"mousemove\", this._onPointerMoveBinded);\n    window.addEventListener(\"resize\", this._resizeBinded);\n    Ticker.add(this._updateBinded = this._updateBinded || this._update.bind(this));\n  }\n\n  disable() {\n    Ticker.delete(this._updateBinded);\n    this._domElement.removeEventListener(\"touchstart\", this._onPointerDownBinded);\n    this._domElement.removeEventListener(\"mousedown\", this._onPointerDownBinded);\n    this._domElement.removeEventListener(\"touchmove\", this._onPointerMoveBinded);\n    this._domElement.removeEventListener(\"mousemove\", this._onPointerMoveBinded);\n    window.removeEventListener(\"touchend\", this._onPointerUpBinded);\n    window.removeEventListener(\"mouseup\", this._onPointerUpBinded);\n    window.removeEventListener(\"resize\", this._resizeBinded);\n  }\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2), nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = (2 * far * near) * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as mat4 from \"../../gl-matrix/src/gl-matrix/mat4.js\";\r\n\r\nexport default class Matrix4 extends Float32Array {\r\n  constructor(array = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]) {\r\n    super(array);\r\n    return this;\r\n  }\r\n\r\n  set x(value) {\r\n    this[12] = value;\r\n  }\r\n\r\n  get x() {\r\n    return this[12];\r\n  }\r\n\r\n  set y(value) {\r\n    this[13] = value;\r\n  }\r\n\r\n  get y() {\r\n    return this[13];\r\n  }\r\n\r\n  set z(value) {\r\n    this[14] = value;\r\n  }\r\n\r\n  get z() {\r\n    return this[14];\r\n  }\r\n\r\n  set w(value) {\r\n    this[15] = value;\r\n  }\r\n\r\n  get w() {\r\n    return this[15];\r\n  }\r\n\r\n  set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n    if (m00.length) {\r\n      return this.copy(m00);\r\n    }\r\n    mat4.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\r\n    return this;\r\n  }\r\n\r\n  translate(vector3, matrix4 = this) {\r\n    mat4.translate(this, matrix4, vector3);\r\n    return this;\r\n  }\r\n\r\n  rotateX(value, matrix4 = this) {\r\n    mat4.rotateX(this, matrix4, value);\r\n    return this;\r\n  }\r\n\r\n  rotateY(value, matrix4 = this) {\r\n    mat4.rotateY(this, matrix4, value);\r\n    return this;\r\n  }\r\n\r\n  rotateZ(value, matrix4 = this) {\r\n    mat4.rotateZ(this, matrix4, value);\r\n    return this;\r\n  }\r\n\r\n  scale(value, matrix4 = this) {\r\n    mat4.scale(this, matrix4, typeof value === \"number\" ? [value, value, value] : value);\r\n    return this;\r\n  }\r\n\r\n  multiply(matrix4a, matrix4b) {\r\n    if (matrix4b) {\r\n      mat4.multiply(this, matrix4a, matrix4b);\r\n    } else {\r\n      mat4.multiply(this, this, matrix4a);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  identity() {\r\n    mat4.identity(this);\r\n    return this;\r\n  }\r\n\r\n  copy(matrix4) {\r\n    mat4.copy(this, matrix4);\r\n    return this;\r\n  }\r\n\r\n  fromPerspective({ fov, aspectRatio, near, far } = {}) {\r\n    mat4.perspective(this, fov, aspectRatio, near, far);\r\n    return this;\r\n  }\r\n\r\n  fromQuaternion(quaternion) {\r\n    mat4.fromQuat(this, quaternion);\r\n    return this;\r\n  }\r\n\r\n  setPosition(vector3) {\r\n    this.x = vector3[0];\r\n    this.y = vector3[1];\r\n    this.z = vector3[2];\r\n    return this;\r\n  }\r\n\r\n  invert(matrix4 = this) {\r\n    mat4.invert(this, matrix4);\r\n    return this;\r\n  }\r\n}\r\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as vec3 from \"../../gl-matrix/src/gl-matrix/vec3.js\";\r\n\r\nexport default class Vector3 extends Float32Array {\r\n  constructor(array = [0, 0, 0]) {\r\n    super(array);\r\n    return this;\r\n  }\r\n\r\n  get x() {\r\n    return this[0];\r\n  }\r\n\r\n  set x(value) {\r\n    this[0] = value;\r\n  }\r\n\r\n  get y() {\r\n    return this[1];\r\n  }\r\n\r\n  set y(value) {\r\n    this[1] = value;\r\n  }\r\n\r\n  get z() {\r\n    return this[2];\r\n  }\r\n\r\n  set z(value) {\r\n    this[2] = value;\r\n  }\r\n\r\n  set(x, y, z) {\r\n    vec3.set(this, x, y, z);\r\n    return this;\r\n  }\r\n\r\n  copy(vector3) {\r\n    vec3.copy(this, vector3);\r\n    return this;\r\n  }\r\n\r\n  add(vector3) {\r\n    vec3.add(this, this, vector3);\r\n    return this;\r\n  }\r\n\r\n  get size() {\r\n    return vec3.length(this);\r\n  }\r\n\r\n  get squaredSize() {\r\n    return vec3.squaredLength(this);\r\n  }\r\n\r\n  distance(vector3) {\r\n    return vec3.distance(this, vector3);\r\n  }\r\n\r\n  subtract(vector3) {\r\n    vec3.subtract(this, this, vector3);\r\n    return this;\r\n  }\r\n\r\n  negate(vector3 = this) {\r\n    vec3.negate(this, vector3);\r\n    return this;\r\n  }\r\n\r\n  cross(vector3a, vector3b) {\r\n    vec3.cross(this, vector3a, vector3b);\r\n    return this;\r\n  }\r\n\r\n  scale(value) {\r\n    vec3.scale(this, this, value);\r\n    return this;\r\n  }\r\n\r\n  normalize() {\r\n    vec3.normalize(this, this);\r\n    return this;\r\n  }\r\n\r\n  dot(vector3) {\r\n    return vec3.dot(this, vector3);\r\n  }\r\n\r\n  equals(vector3) {\r\n    return vec3.exactEquals(this, vector3);\r\n  }\r\n\r\n  applyMatrix4(matrix4) {\r\n    vec3.transformMat4(this, this, matrix4);\r\n    return this;\r\n  }\r\n\r\n  angle(vector3) {\r\n    return vec3.angle(this, vector3);\r\n  }\r\n\r\n  clone() {\r\n    return new Vector3(this);\r\n  }\r\n}\r\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > glMatrix.EPSILON ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Generates a random quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  let u1 = glMatrix.RANDOM();\n  let u2 = glMatrix.RANDOM();\n  let u3 = glMatrix.RANDOM();\n\n  let sqrt1MinusU1 = Math.sqrt(1 - u1);\n  let sqrtU1 = Math.sqrt(u1);\n\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as quat from \"../../gl-matrix/src/gl-matrix/quat.js\";\r\n\r\nexport default class Quaternion extends Float32Array {\r\n  constructor(x = 0, y = 0, z = 0, w = 1) {\r\n    super(4);\r\n    this.set(x, y, z, w);\r\n    return this;\r\n  }\r\n\r\n  get x() {\r\n    return this[0];\r\n  }\r\n\r\n  set x(value) {\r\n    this[0] = value;\r\n  }\r\n\r\n  get y() {\r\n    return this[1];\r\n  }\r\n\r\n  set y(value) {\r\n    this[1] = value;\r\n  }\r\n\r\n  get z() {\r\n    return this[2];\r\n  }\r\n\r\n  set z(value) {\r\n    this[2] = value;\r\n  }\r\n\r\n  get w() {\r\n    return this[3];\r\n  }\r\n\r\n  set w(value) {\r\n    this[3] = value;\r\n  }\r\n\r\n  identity() {\r\n    quat.identity(this);\r\n    return this;\r\n  }\r\n\r\n  set(x, y, z, w) {\r\n    quat.set(this, x, y, z, w);\r\n    return this;\r\n  }\r\n\r\n  rotateX(angle) {\r\n    quat.rotateX(this, this, angle);\r\n    return this;\r\n  }\r\n\r\n  rotateY(angle) {\r\n    quat.rotateY(this, this, angle);\r\n    return this;\r\n  }\r\n\r\n  rotateZ(angle) {\r\n    quat.rotateZ(this, this, angle);\r\n    return this;\r\n  }\r\n\r\n  invert(quaternion = this) {\r\n    quat.invert(this, quaternion);\r\n    return this;\r\n  }\r\n\r\n  copy(quaternion) {\r\n    quat.copy(this, quaternion);\r\n    return this;\r\n  }\r\n\r\n  normalize(quaternion = this) {\r\n    quat.normalize(this, this);\r\n    return this;\r\n  }\r\n\r\n  multiply(quaternionA, quaternionB) {\r\n    if (quaternionB) {\r\n      quat.multiply(this, quaternionA, quaternionB);\r\n    } else {\r\n      quat.multiply(this, this, quaternionA);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  fromMatrix3(matrix3) {\r\n    quat.fromMat3(this, matrix3);\r\n    return this;\r\n  }\r\n}\r\n","import Pointer from \"../../input/Pointer.js\";\nimport Matrix4 from \"../../math/Matrix4.js\";\nimport Vector2 from \"../../math/Vector2.js\";\nimport Vector3 from \"../../math/Vector3.js\";\nimport Quaternion from \"../../math/Quaternion.js\";\n\nexport default class TrackballController {\n  constructor({\n    matrix = new Matrix4(), \n    domElement = document.body,\n    distance = 0,\n    invertRotation = true,\n    rotationEaseRatio = .04,\n    zoomSpeed = .1,\n    zoomEaseRatio = .1,\n    minDistance = 0,\n    maxDistance = Infinity,\n    enabled = true\n  } = {}) {\n    this.matrix = matrix;\n\n    this._distance = distance;\n    this.invertRotation = invertRotation;\n    this.rotationEaseRatio = rotationEaseRatio;\n    this.maxDistance = maxDistance;\n    this.minDistance = minDistance;\n    this.zoomSpeed = zoomSpeed;\n    this.zoomEaseRatio = zoomEaseRatio;\n    \n    this._pointer = Pointer.get(domElement);\n    this._nextDistance = this._distance;\n    \n    this._cachedQuaternion = new Quaternion();\n    this._cachedMatrix = new Matrix4();\n    this._cachedVector3 = new Vector3();\n    \n    this._velocity = new Vector2();\n    this._velocityOrigin = new Vector2();\n    \n    this._position = new Vector3([this.matrix.x, this.matrix.y, this.matrix.z]);\n    this._positionPrevious = this._position.clone();\n    this._positionOffset = new Vector3();\n    \n    domElement.addEventListener(\"wheel\", this.onWheel.bind(this));\n    \n    this.enabled = true;\n    this.update();\n    this.enabled = enabled;\n  }\n\n  set distance(value) {\n    this._distance = this._nextDistance = value;\n  }\n\n  get distance() {\n    return this._distance;\n  }\n\n  onWheel(e) {\n    if(!this.enabled) {\n      return;\n    }\n    const scrollOffsetRatio = 1 + Math.abs(e.deltaY * this.zoomSpeed * .01);\n    this._nextDistance = this._nextDistance || 1;\n    this._nextDistance = e.deltaY > 0 ? this._nextDistance * scrollOffsetRatio : this._nextDistance / scrollOffsetRatio;\n    this._nextDistance = Math.max(Math.min(this._nextDistance, this.maxDistance), this.minDistance);\n  }\n\n  update() {\n    if(!this.enabled) {\n      return;\n    }\n\n    this._cachedMatrix.identity();\n    this._cachedQuaternion.identity();\n\n    this._distance += (this._nextDistance - this._distance) * this.zoomEaseRatio;\n\n    this._position.set(this.matrix.x, this.matrix.y, this.matrix.z).subtract(this._positionOffset);\n\n    this.matrix.x = 0;\n    this.matrix.y = 0;\n    this.matrix.z = 0;\n\n    if(this._pointer.downed) {\n      this._velocity.copy(this._pointer.velocity).scale(.003);\n    }\n\n    this._velocity.lerp(this._velocityOrigin, this.rotationEaseRatio);\n\n    this._cachedQuaternion.rotateY(this.invertRotation ? -this._velocity.x : this._velocity.x);\n    this._cachedQuaternion.rotateX(this.invertRotation ? -this._velocity.y : this._velocity.y);\n\n    this._cachedMatrix.fromQuaternion(this._cachedQuaternion);\n\n    this.matrix.multiply(this._cachedMatrix);\n\n    this._positionOffset.set(0, 0, 1);\n    this._positionOffset.applyMatrix4(this.matrix);\n    this._positionOffset.scale(this._distance);\n\n    this._cachedVector3.copy(this._position).add(this._positionOffset);\n\n    this.matrix.x = this._cachedVector3.x;\n    this.matrix.y = this._cachedVector3.y;\n    this.matrix.z = this._cachedVector3.z;\n  }\n}\n","import TrackballController from \"../3d/controllers/TrackballController.js\";\r\nimport Matrix4 from \"../math/Matrix4.js\";\r\n\r\nexport default class THREETrackballController extends TrackballController {\r\n  constructor(object3D = new THREE.Object3D(), options) {\r\n    object3D.updateMatrix();\r\n    super(Object.assign({ matrix: new Matrix4(object3D.matrix.elements) }, options));\r\n    this._matrix4 = new THREE.Matrix4();\r\n    this.object3D = object3D;\r\n\r\n    const enabled = this.enabled;\r\n    this.enabled = true;\r\n    this.update();\r\n    this.enabled = enabled;\r\n  }\r\n\r\n  update() {\r\n    if (!this.object3D) {\r\n      return;\r\n    }\r\n    this.matrix.x = this.object3D.position.x;\r\n    this.matrix.y = this.object3D.position.y;\r\n    this.matrix.z = this.object3D.position.z;\r\n    super.update();\r\n    this._matrix4.fromArray(this.matrix);\r\n    this.object3D.matrix.identity();\r\n    this.object3D.applyMatrix(this._matrix4);\r\n  }\r\n}\r\n","import THREETrackballController from \"../../node_modules/dlib/three/THREETrackballController.js\";\r\n\r\nexport default class Scene extends THREE.Scene {\r\n  constructor({ canvas } = {}) {\r\n    super();\r\n\r\n    this.camera = new THREE.PerspectiveCamera(65, window.innerWidth / window.innerHeight, 0.1, 10000);\r\n\r\n    this.controls = new THREETrackballController(this.camera, {\r\n      distance: 5,\r\n      domElement: canvas,\r\n    });\r\n\r\n    let cube = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), new THREE.MeshNormalMaterial());\r\n\r\n    this.add(cube);\r\n  }\r\n\r\n  resize(width, height) {\r\n    this.camera.aspect = width / height;\r\n    this.camera.updateProjectionMatrix();\r\n  }\r\n\r\n  update() {\r\n    this.controls.update();\r\n  }\r\n}\r\n","export default class THREERenderer extends THREE.WebGLRenderer {\r\n  constructor(options) {\r\n    super(Object.assign({antialias: true}, options));\r\n\r\n    this.filters = [];\r\n    this._renderTargets = new Map();\r\n\r\n    let renderTargetIn = new THREE.WebGLRenderTarget(this.domElement.width, this.domElement.height, {\r\n      format: THREE.RGBAFormat,\r\n      minFilter: THREE.LinearFilter,\r\n      magFilter: THREE.LinearFilter,\r\n      stencilBuffer: false\r\n    });\r\n    renderTargetIn.texture.generateMipmaps = false;\r\n\r\n    let renderTargetOut = renderTargetIn.clone();\r\n    renderTargetOut.texture.generateMipmaps = false;\r\n\r\n    if(this.context.getExtension(\"WEBGL_depth_texture\")) {\r\n      renderTargetIn.depthTexture = new THREE.DepthTexture();\r\n      renderTargetIn.depthTexture.type = THREE.UnsignedShortType;\r\n      renderTargetOut.depthTexture = new THREE.DepthTexture();\r\n      renderTargetOut.depthTexture.type = THREE.UnsignedShortType;\r\n    }\r\n\r\n    this._renderTargets.set(this, {\r\n      in: renderTargetIn,\r\n      out: renderTargetOut\r\n    });\r\n\r\n    this.scene = new THREE.Scene();\r\n    this.scene.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n    this._quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2));\r\n    this._quad.frustumCulled = false;\r\n    this.scene.add(this._quad);\r\n\r\n    // Fix to make WebGLRenderer.render extendable\r\n    this._render = this.render;\r\n    delete this.render;\r\n  }\r\n\r\n  applyFilter(filter, renderTargetIn, renderTargetOut) {\r\n    this._quad.material = filter;\r\n    if (filter.renderTargetTexture) {\r\n      filter.renderTargetTexture = renderTargetIn.texture;\r\n    }\r\n    if (filter.renderTargetDepthTexture && renderTargetIn.depthTexture) {\r\n      filter.renderTargetDepthTexture = renderTargetIn.depthTexture;\r\n    }\r\n    this._render(this.scene, this.scene.camera, renderTargetOut);\r\n  }\r\n\r\n  resize(width, height) {\r\n    this.setSize(width, height, false);\r\n    let renderTargets = this._renderTargets.get(this);\r\n    renderTargets.in.setSize(width, height);\r\n    renderTargets.out.setSize(width, height);\r\n  }\r\n\r\n  render({scene, camera, filters = this.filters, renderTarget, viewport, scissor = viewport} = {}) {\r\n    if(arguments.length > 1) {\r\n      this._render(...arguments);\r\n      return;\r\n    }\r\n    let renderTargets = this._renderTargets.get(renderTarget || this);\r\n    if(!renderTargets) {\r\n      renderTargets = {\r\n        in: renderTarget.clone(),\r\n        out: renderTarget.clone()\r\n      };\r\n      renderTargets.in.texture.generateMipmaps = false;\r\n      renderTargets.out.texture.generateMipmaps = false;\r\n      this._renderTargets.set(renderTarget, renderTargets);\r\n    }\r\n    if(viewport || scissor) {\r\n      if(viewport) {\r\n        if(renderTarget) {\r\n          renderTarget.viewport.set(viewport[0], viewport[1], viewport[2], viewport[3]);\r\n        } else {\r\n          this.setViewport(viewport[0], viewport[1], viewport[2], viewport[3]);\r\n        }\r\n      }\r\n      if(renderTarget) {\r\n        renderTarget.scissor.set(scissor[0], scissor[1], scissor[2], scissor[3]);\r\n        renderTarget.scissorTest = true;\r\n      } else {\r\n        this.setScissor(scissor[0], scissor[1], scissor[2], scissor[3]);\r\n        this.setScissorTest(true);\r\n      }\r\n    } else {\r\n      if(renderTarget) {\r\n        renderTarget.viewport.set(0, 0, renderTarget.width, renderTarget.height);\r\n        renderTarget.scissor.set(0, 0, renderTarget.width, renderTarget.height);\r\n        renderTarget.scissorTest = false;\r\n      } else {\r\n        this.setViewport(0, 0, this.domElement.width, this.domElement.height);\r\n        this.setScissor(0, 0, this.domElement.width, this.domElement.height);\r\n        this.setScissorTest(false);\r\n      }\r\n    }\r\n    if(scene) {\r\n      camera = camera || scene.camera;\r\n      this._render(scene, camera, filters.length ? renderTargets.in : renderTarget);\r\n    }\r\n    for (let [i, filter] of filters.entries()) {\r\n      this.applyFilter(filter, renderTargets.in, i < filters.length - 1 ? renderTargets.out : renderTarget);\r\n      [renderTargets.in, renderTargets.out] = [renderTargets.out, renderTargets.in];\r\n    }\r\n  }\r\n}\r\n","export default class Shader {\n  static add(string = \"void main() {}\", chunks) {\n    function regExpFromKey(key) {\n      let regExpString = key instanceof RegExp ? key.source : key.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n      return new RegExp(`(${regExpString})`);\n    }\n\n    \n    for (let [key, chunk] of chunks) {\n      switch (key) {\n        case \"start\":\n          string = string.replace(/^(#version .*?\\n(\\s*precision highp float;\\s)?)?([\\s\\S]*)/, `$1\\n${chunk}\\n$3`);\n          break;\n        case \"end\":\n          string = string.replace(/(}\\s*$)/, `\\n${chunk}\\n$1`);\n          break;\n        case \"main\":\n          string = string.replace(/(\\bvoid\\b +\\bmain\\b[\\s\\S]*?{\\s*)/, `$1\\n${chunk}\\n`);\n          break;\n        default:\n          string = string.replace(key, chunk)\n      }\n    }\n\n    return string;\n  }\n\n  constructor({ vertexShader = `#version 300 es\n      void main() {\n        gl_Position = vec4(0., 0., 0., 1.);\n      }\n    `, fragmentShader = `#version 300 es\n      precision highp float;\n\n      out vec4 fragColor;\n\n      void main() {\n        fragColor = vec4(1.);\n      }\n    `,\n    dataTypeConctructors = {\n      Vector2: class Vector2 extends Float32Array { constructor() { super(2) } },\n      Vector3: class Vector3 extends Float32Array { constructor() { super(3) } },\n      Vector4: class Vector4 extends Float32Array { constructor() { super(4) } },\n      Matrix3: class Matrix3 extends Float32Array { constructor() { super([1, 0, 0, 0, 1, 0, 0, 0, 1]) } },\n      Matrix4: class Matrix4 extends Float32Array { constructor() { super([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]) } },\n      Texture: class Texture { },\n      TextureCube: class TextureCube { }\n    },\n    uniforms = [],\n    vertexShaderChunks = [],\n    fragmentShaderChunks = [],\n    shaders = []\n  } = {}) {\n    this.uniforms = new Map();\n    this.uniformTypes = new Map();\n\n    this._dataTypeConctructors = dataTypeConctructors;\n\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n    this._vertexShaderChunks = [];\n    this._fragmentShaderChunks = [];\n\n    this.add({ vertexShaderChunks, fragmentShaderChunks, uniforms });\n\n    for (let shader of shaders) {\n      this.add(shader);\n    }\n  }\n\n  add({ vertexShaderChunks = [], fragmentShaderChunks = [], uniforms = [] } = {}) {\n    this.vertexShader = Shader.add(this.vertexShader, vertexShaderChunks);\n    this._vertexShaderChunks.push(...vertexShaderChunks);\n    this.fragmentShader = Shader.add(this.fragmentShader, fragmentShaderChunks);\n    this._fragmentShaderChunks.push(...fragmentShaderChunks);\n    for (let [key, value] of uniforms) {\n      this.uniforms.set(key, value);\n    }\n  }\n\n  set vertexShader(value) {\n    this._vertexShader = value;\n    this._parseUniforms(this._vertexShader);\n  }\n\n  get vertexShader() {\n    return this._vertexShader;\n  }\n\n  set fragmentShader(value) {\n    this._fragmentShader = value;\n    this._parseUniforms(this._fragmentShader);\n  }\n\n  get fragmentShader() {\n    return this._fragmentShader;\n  }\n\n  get vertexShaderChunks() {\n    return this._vertexShaderChunks;\n  }\n\n  get fragmentShaderChunks() {\n    return this._fragmentShaderChunks;\n  }\n\n  _addUniform(name, type, arrayLength) {\n\n    if (this.uniforms.has(name)) {\n      return;\n    }\n\n    let value;\n    let typeMatch;\n\n    this.uniformTypes.set(name, type);\n\n    if (/float|double/.test(type)) {\n      if (isNaN(arrayLength)) {\n        value = 0;\n      } else {\n        value = new Array(arrayLength).fill(0);\n      }\n    } else if (/int|uint/.test(type)) {\n      if (isNaN(arrayLength)) {\n        value = 0;\n      } else {\n        value = new Array(arrayLength).fill(0);\n      }\n    } else if (/sampler2D/.test(type)) {\n      if (isNaN(arrayLength)) {\n        value = new this._dataTypeConctructors[\"Texture\"]();\n      } else {\n        value = new Array(arrayLength).fill().map(value => new this._dataTypeConctructors[\"Texture\"]());\n      }\n    } else if (/samplerCube/.test(type)) {\n      if (isNaN(arrayLength)) {\n        value = new this._dataTypeConctructors[\"TextureCube\"]();\n      } else {\n        value = new Array(arrayLength).fill().map(value => new this._dataTypeConctructors[\"TextureCube\"]());\n      }\n    } else if ((typeMatch = /(.?)vec(\\d)/.exec(type))) {\n      let vectorLength = typeMatch[2];\n      if (isNaN(arrayLength)) {\n        value = new this._dataTypeConctructors[`Vector${vectorLength}`]();\n      } else {\n        value = new Array(arrayLength).fill().map(value => new this._dataTypeConctructors[`Vector${vectorLength}`]());\n      }\n    } else if ((typeMatch = /mat(\\d)/.exec(type))) {\n      let matrixLength = typeMatch[1];\n      if (isNaN(arrayLength)) {\n        value = new this._dataTypeConctructors[`Matrix${matrixLength}`]();\n      } else {\n        value = new Array(arrayLength).fill().map(value => new this._dataTypeConctructors[`Matrix${matrixLength}`]());\n      }\n    } else {\n      value = undefined;\n    }\n\n    this.uniforms.set(name, value);\n  }\n\n  /**\n   * Parse shader strings to extract uniforms\n   */\n  _parseUniforms(string) {\n    const structures = new Map();\n\n    const structRegExp = /struct\\s*(.*)\\s*{\\s*([\\s\\S]*?)}/g;\n    const structMemberRegExp = /^\\s*(.[^ ]+) (.[^ ;\\[\\]]+)\\[? *(\\d+)? *\\]?/gm;\n    let structMatch;\n    while ((structMatch = structRegExp.exec(string))) {\n      const structName = structMatch[1];\n      const structString = structMatch[2];\n\n      const structure = {};\n      let structMemberMatch;\n      while ((structMemberMatch = structMemberRegExp.exec(structString))) {\n        const [, type, name, arrayLengthStr] = structMemberMatch;\n        const arrayLength = parseInt(arrayLengthStr);\n        structure[name] = {\n          type,\n          arrayLength\n        };\n      }\n\n      structures.set(structName, structure);\n    }\n\n    const uniformsRegExp = /^\\s*uniform (.[^ ]+) (.[^ ;\\[\\]]+)\\[? *(\\d+)? *\\]?/gm;\n    let uniformMatch;\n    while ((uniformMatch = uniformsRegExp.exec(string))) {\n      const [, type, name, arrayLengthStr] = uniformMatch;\n      const arrayLength = parseInt(arrayLengthStr);\n\n      const structure = structures.get(type);\n      if (structure) {\n        for (const key in structure) {\n          this._addUniform(`${name}.${key}`, structure[key].type, structure[key].arrayLength);\n        }\n      } else {\n        this._addUniform(name, type, arrayLength);\n      }\n    }\n  }\n}\n","import Shader from \"../3d/Shader.js\";\n\nexport default class THREEShader extends Shader {\n  constructor({ vertexShader = `\n    void main() {\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n    }\n  `, fragmentShader = `\n    void main() {\n      gl_FragColor = vec4(1.);\n    }\n  `, uniforms, shaders } = {}) {\n    super({\n      vertexShader,\n      fragmentShader,\n      uniforms,\n      shaders,\n      dataTypeConctructors: {\n        Vector2: THREE.Vector2,\n        Vector3: THREE.Vector3,\n        Vector4: THREE.Vector4,\n        Matrix3: THREE.Matrix3,\n        Matrix4: THREE.Matrix4,\n        Texture: THREE.Texture,\n        TextureCube: THREE.CubeTexture\n      }\n    });\n  }\n\n  add({ vertexShaderChunks = [], fragmentShaderChunks = [], uniforms = [] } = {}) {\n    if (!(uniforms instanceof Array || uniforms instanceof Map)) {\n      const uniformObject = uniforms;\n      uniforms = new Map();\n      for (let key in uniformObject) {\n        uniforms.set(key, uniformObject[key].value !== undefined ? uniformObject[key].value : uniformObject[key]); \n      }\n    }\n    if (!(this.uniforms instanceof Array || this.uniforms instanceof Map)) {\n      const uniformObject = this.uniforms;\n      this.uniforms = new Map();\n      for (let key in uniformObject) {\n        this.uniforms.set(key, uniformObject[key].value !== undefined ? uniformObject[key].value : uniformObject[key]); \n      }\n    }\n    super.add({ vertexShaderChunks, fragmentShaderChunks, uniforms });\n    \n    const uniformsObject = {};\n    for (let [key, uniform] of this.uniforms) {\n      uniformsObject[key] = {\n        value: uniform\n      };\n    }\n    this.uniforms = uniformsObject;\n  }\n}\n","import THREEShader from \"./THREEShader.js\";\r\n\r\nexport default class THREEShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(options = {}) {\r\n    let type = options.type || \"\";\r\n    let vertexShaderChunks = options.vertexShaderChunks;\r\n    let fragmentShaderChunks = options.fragmentShaderChunks;\r\n    let uniforms = options.uniforms;\r\n    let shaders = options.shaders || [];\r\n\r\n    options = Object.assign({}, options);\r\n    delete options.type;\r\n    delete options.vertexShaderChunks;\r\n    delete options._vertexShaderChunks;\r\n    delete options._vertexShader;\r\n    delete options.fragmentShaderChunks;\r\n    delete options._fragmentShaderChunks;\r\n    delete options._fragmentShader;\r\n    delete options.uniforms;\r\n    delete options.attributes;\r\n    delete options.shaders;\r\n\r\n    let shader = new THREEShader({\r\n      vertexShader: options.vertexShader || (type ? THREE.ShaderLib[type].vertexShader : undefined),\r\n      fragmentShader: options.fragmentShader || (type ? THREE.ShaderLib[type].fragmentShader : undefined),\r\n      uniforms: type ? THREE.UniformsUtils.clone(THREE.ShaderLib[type].uniforms) : undefined\r\n    });\r\n\r\n    super(Object.assign({\r\n      fragmentShader: shader.fragmentShader,\r\n      vertexShader: shader.vertexShader,\r\n      uniforms: shader.uniforms\r\n    }, options));\r\n\r\n    this.defines = { [type.toUpperCase()]: \"\" };\r\n\r\n    this._shader = shader;\r\n    this.add({ vertexShaderChunks, fragmentShaderChunks, uniforms });\r\n\r\n    for (let shader of shaders) {\r\n      this.add(shader);\r\n    }\r\n\r\n    this.lights = /lambert|phong|standard/.test(type);\r\n\r\n    if(this.envMap) {\r\n      this.envMap = this.envMap;\r\n    }\r\n  }\r\n\r\n  add({ vertexShaderChunks, fragmentShaderChunks, uniforms }) {\r\n    this._shader.add({ vertexShaderChunks, fragmentShaderChunks, uniforms });\r\n\r\n    this.fragmentShader = this._shader.fragmentShader;\r\n    this.vertexShader = this._shader.vertexShader;\r\n\r\n    for (let name in this._shader.uniforms) {\r\n      let key = name; // Firefox fix\r\n      this.uniforms[key] = this._shader.uniforms[key];\r\n\r\n      let setter;\r\n      if(key === \"envMap\") {\r\n        setter = function (value) {\r\n          if (value && value.generateMipmaps && value.image) {\r\n            this.maxMipLevel = Math.log2(Math.max(value.image.width, value.image.height));\r\n          }\r\n          this.uniforms[key].value = value;\r\n        }\r\n      } else {\r\n        setter = function (value) {\r\n          this.uniforms[key].value = value;\r\n        }\r\n      }\r\n\r\n      Object.defineProperty(this, key, {\r\n        configurable: true,\r\n        get: function () {\r\n          return this.uniforms[key].value;\r\n        },\r\n        set: setter\r\n      });\r\n    }\r\n\r\n    this.needsUpdate = true;\r\n  }\r\n}\r\n","// From https://github.com/mattdesl/glsl-fxaa\n\nexport default class AntialiasGLSL {\n  static vertex() {\n    return `\n      varying vec2 v_rgbNW;\n      varying vec2 v_rgbNE;\n      varying vec2 v_rgbSW;\n      varying vec2 v_rgbSE;\n      varying vec2 v_rgbM;\n\n      void computeFXAATextureCoordinates(vec2 uv, vec2 resolution) {\n        vec2 inverseVP = 1.0 / resolution.xy;\n        vec2 fragCoord = uv * resolution;\n        v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n        v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n        v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n        v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n        v_rgbM = vec2(fragCoord * inverseVP);\n      }\n    `;\n  }\n\n  static fragment() {\n    return `\n      varying vec2 v_rgbNW;\n      varying vec2 v_rgbNE;\n      varying vec2 v_rgbSW;\n      varying vec2 v_rgbSE;\n      varying vec2 v_rgbM;\n\n      #ifndef FXAA_REDUCE_MIN\n      #define FXAA_REDUCE_MIN   (1.0/ 128.0)\n      #endif\n      #ifndef FXAA_REDUCE_MUL\n      #define FXAA_REDUCE_MUL   (1.0 / 8.0)\n      #endif\n      #ifndef FXAA_SPAN_MAX\n      #define FXAA_SPAN_MAX     8.0\n      #endif\n\n      vec4 fxaa(sampler2D tex, vec2 uv, vec2 resolution) {\n        vec4 color;\n        vec2 fragCoord = uv * resolution;\n        mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n        vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\n        vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\n        vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\n        vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\n        vec4 texColor = texture2D(tex, v_rgbM);\n        vec3 rgbM  = texColor.xyz;\n        vec3 luma = vec3(0.299, 0.587, 0.114);\n        float lumaNW = dot(rgbNW, luma);\n        float lumaNE = dot(rgbNE, luma);\n        float lumaSW = dot(rgbSW, luma);\n        float lumaSE = dot(rgbSE, luma);\n        float lumaM  = dot(rgbM,  luma);\n        float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n        float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n\n        mediump vec2 dir;\n        dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n        dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n        float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n        (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n\n        float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n        dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n        max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n        dir * rcpDirMin)) * inverseVP;\n\n        vec3 rgbA = 0.5 * (\n        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\n        vec3 rgbB = rgbA * 0.5 + 0.25 * (\n          texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\n          texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\n\n        float lumaB = dot(rgbB, luma);\n        if ((lumaB < lumaMin) || (lumaB > lumaMax))\n        color = vec4(rgbA, texColor.a);\n        else\n        color = vec4(rgbB, texColor.a);\n        return color;\n      }\n    `;\n  }\n}\n","import THREERenderer from \"../../node_modules/dlib/three/THREERenderer.js\";\r\nimport THREEShaderMaterial from \"../../node_modules/dlib/three/THREEShaderMaterial.js\";\r\nimport AntialiasGLSL from \"../../node_modules/dlib/shaders/AntialiasGLSL.js\";\r\n\r\nexport default class Renderer extends THREERenderer {\r\n  constructor(options) {\r\n    super(options);\r\n\r\n    if (options.antialias !== false && !this.context.getContextAttributes().antialias) {\r\n      this.filters.push(this.fxaaFilter = new THREEShaderMaterial({\r\n        vertexShader: `\r\n          uniform vec2 resolution;\r\n          varying vec2 vUv;\r\n          ${AntialiasGLSL.vertex()}\r\n          void main() {\r\n            computeFXAATextureCoordinates(uv, resolution);\r\n            vUv = uv;\r\n            gl_Position = vec4(position, 1.);\r\n          }\r\n        `,\r\n        fragmentShader: `\r\n          uniform vec2 resolution;\r\n          uniform sampler2D renderTargetTexture;\r\n          varying vec2 vUv;\r\n          ${AntialiasGLSL.fragment()}\r\n          void main() {\r\n            gl_FragColor = fxaa(renderTargetTexture, vUv, resolution);\r\n          }\r\n        `,\r\n      }));\r\n    }\r\n  }\r\n\r\n  resize(width, height) {\r\n    width *= window.devicePixelRatio;\r\n    height *= window.devicePixelRatio;\r\n    super.resize(width, height);\r\n    if (this.fxaaFilter) {\r\n      this.fxaaFilter.resolution.set(width, height);\r\n    }\r\n  }\r\n}\r\n","import LoopElement from \"../../node_modules/dlib/customelements/LoopElement.js\";\r\n\r\nimport Scene from \"./Scene.js\";\r\nimport Renderer from \"./Renderer.js\";\r\n\r\nwindow.customElements.define(\"dnit-main\", class extends LoopElement {\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    this.innerHTML = `\r\n      <style>\r\n        @import \"src/main/index.css\";\r\n      </style>\r\n      <canvas></canvas>\r\n    `;\r\n\r\n    this.canvas = this.querySelector(\"canvas\");\r\n\r\n    this.renderer = new Renderer({ canvas: this.canvas });\r\n\r\n    this.scene = new Scene({ canvas: this.canvas });\r\n\r\n    this.querySelector(\"style\").addEventListener(\"load\", () => {\r\n      this.dispatchEvent(new Event(\"load\"));\r\n      this.resize();\r\n      this.play();\r\n    });\r\n\r\n    window.addEventListener(\"resize\", this._resizeBinded = this.resize.bind(this));\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    super.disconnectedCallback();\r\n    window.removeEventListener(\"resize\", this._resizeBinded);\r\n  }\r\n\r\n  resize() {\r\n    let width = this.canvas.offsetWidth;\r\n    let height = this.canvas.offsetHeight;\r\n    this.scene.resize(width, height);\r\n    this.renderer.resize(width, height);\r\n    this.renderer.render({ scene: this.scene });\r\n  }\r\n\r\n  update() {\r\n    this.scene.update();\r\n    this.renderer.render({ scene: this.scene });\r\n  }\r\n});\r\n"],"names":["Ticker","glMatrix.ARRAY_TYPE","vec2.distance","vec2.set","vec2.copy","vec2.add","vec2.length","vec2.squaredLength","vec2.subtract","vec2.negate","vec2.cross","vec2.scale","vec2.normalize","vec2.dot","vec2.exactEquals","vec2.transformMat3","vec2.transformMat4","vec2.lerp","copy","set","multiply","scale","mat4.set","mat4.translate","mat4.rotateX","mat4.rotateY","mat4.rotateZ","mat4.scale","mat4.multiply","mat4.identity","mat4.copy","mat4.perspective","mat4.fromQuat","mat4.invert","create","length","fromValues","add","subtract","distance","squaredLength","negate","normalize","dot","cross","transformMat4","angle","exactEquals","len","forEach","vec3.set","vec3.copy","vec3.add","vec3.length","vec3.squaredLength","vec3.distance","vec3.subtract","vec3.negate","vec3.cross","vec3.scale","vec3.normalize","vec3.dot","vec3.exactEquals","vec3.transformMat4","vec3.angle","identity","rotateX","rotateY","rotateZ","glMatrix.EPSILON","invert","vec4.copy","vec4.set","vec4.normalize","vec3.create","vec3.fromValues","vec3.len","mat3.create","quat.identity","quat.set","quat.rotateX","quat.rotateY","quat.rotateZ","quat.invert","quat.copy","quat.normalize","quat.multiply","quat.fromMat3"],"mappings":"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C,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACnD,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACnD,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACrD,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;EAEvD,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChC,IAAI,GAAG,GAA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,CAAC;EAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC;EAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC;EAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC;;EAE3C,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAC7C,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC;EAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC;EAC3C,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC;EAC5C,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC;;EAE5C,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/C,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EA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"}