{"version":3,"file":"index.js","sources":["../../../node_modules/@damienmortini/core/util/Signal.js","../../../node_modules/@damienmortini/core/util/Ticker.js","../../../node_modules/@damienmortini/element-animation-ticker/index.js","../../../node_modules/gl-matrix/esm/common.js","../../../node_modules/gl-matrix/esm/mat4.js","../../../node_modules/@damienmortini/core/math/Matrix4.js","../../../node_modules/@damienmortini/core/3d/Camera.js","../../../node_modules/@damienmortini/core/3d/mesh/BoxMesh.js","../../../node_modules/@damienmortini/core/gl/GLVertexArray.js","../../../node_modules/@damienmortini/core/gl/GLTexture.js","../../../node_modules/@damienmortini/core/gl/GLBuffer.js","../../../node_modules/@damienmortini/core/gl/GLVertexAttribute.js","../../../node_modules/@damienmortini/core/gl/GLMesh.js","../../../node_modules/@damienmortini/core/3d/Shader.js","../../../node_modules/@damienmortini/core/gl/GLProgram.js","../../../node_modules/@damienmortini/core/gl/objects/GLBoxObject.js","../../../node_modules/@damienmortini/core/gl/GLObject.js","../../../node_modules/gl-matrix/esm/vec2.js","../../../node_modules/@damienmortini/core/math/Vector2.js","../../../node_modules/@damienmortini/core/input/Pointer.js","../../../node_modules/gl-matrix/esm/vec3.js","../../../node_modules/@damienmortini/core/math/Vector3.js","../../../node_modules/gl-matrix/esm/vec4.js","../../../node_modules/gl-matrix/esm/quat.js","../../../node_modules/gl-matrix/esm/mat3.js","../../../node_modules/@damienmortini/core/math/Quaternion.js","../../../node_modules/@damienmortini/core/3d/controller/TrackballController.js","../../../node_modules/@damienmortini/core/shader/BasicShader.js","../../../node_modules/@damienmortini/starter-gl/src/View.js","../../../node_modules/@damienmortini/starter-gl/src/index.js"],"sourcesContent":["export default class Signal extends Set {\n  constructor() {\n    super();\n\n    this._onceCallbacksMap = new Map();\n  }\n\n  add(value, { once = false } = {}) {\n    if (once) {\n      const onceCallbackWrapper = (...args) => {\n        value(...args);\n        this.delete(value);\n      };\n      this._onceCallbacksMap.set(value, onceCallbackWrapper);\n      return super.add(onceCallbackWrapper);\n    } else {\n      return super.add(value);\n    }\n  }\n\n  delete(value) {\n    this._onceCallbacksMap.delete(value);\n    return super.delete(this._onceCallbacksMap.get(value) || value);\n  }\n\n  dispatch(value) {\n    for (const callback of this) {\n      callback(value);\n    }\n  }\n}\n","import Signal from './Signal.js';\n\nconst DELTA_TIME_BASE = 1 / 60;\n\nclass Ticker extends Signal {\n  constructor() {\n    super();\n\n    this._updateBinded = this._update.bind(this);\n\n    this.time = window.performance.now() * .001;\n    this.reset();\n\n    document.addEventListener('visibilitychange', () => {\n      this.reset();\n    });\n\n    this._update();\n  }\n\n  reset() {\n    this._previousTime = window.performance.now() * .001;\n    this.deltaTime = DELTA_TIME_BASE;\n    this.smoothDeltatime = this.deltaTime;\n    this.timeScale = 1;\n    this.smoothTimeScale = this.timeScale;\n  }\n\n  _update() {\n    requestAnimationFrame(this._updateBinded);\n\n    this.time = window.performance.now() * 0.001;\n    this.deltaTime = this.time - this._previousTime;\n    this.smoothDeltatime += (this.deltaTime - this.smoothDeltatime) * .05;\n    this.timeScale = this.deltaTime / DELTA_TIME_BASE;\n    this.smoothTimeScale = this.smoothDeltatime / DELTA_TIME_BASE;\n    this._previousTime = this.time;\n\n    this.dispatch();\n  }\n}\n\nexport default new Ticker();\n","import Ticker from '../core/util/Ticker.js';\n\nconst PAUSED_BY_USER = 1;\nconst PAUSED_BY_INTERSECTION = 2;\nconst PAUSED_BY_VISIBILITY = 4;\nconst PAUSED_BY_BLUR = 8;\nconst PAUSED_BY_CONNECTION = 16;\n\n/**\n * Element triggering requestAnimationFrame on its update method.\n * @hideconstructor\n */\nclass AnimationTickerElement extends HTMLElement {\n  constructor() {\n    super();\n\n    this.noautoplay = false;\n\n    this._updateBinded = this.update.bind(this);\n\n    this._pauseFlag = 0;\n\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        this._pauseFlag |= PAUSED_BY_VISIBILITY;\n      } else {\n        this._pauseFlag &= ~PAUSED_BY_VISIBILITY;\n      }\n    });\n    const observer = new IntersectionObserver((entries) => {\n      let isIntersecting = false;\n      for (const entry of entries) {\n        if (entry.isIntersecting) {\n          isIntersecting = true;\n        }\n      }\n      if (isIntersecting) {\n        this._pauseFlag &= ~PAUSED_BY_INTERSECTION;\n      } else {\n        this._pauseFlag |= PAUSED_BY_INTERSECTION;\n      }\n    });\n    observer.observe(this);\n\n    window.addEventListener('blur', () => {\n      this._pauseFlag |= PAUSED_BY_BLUR;\n    });\n    window.addEventListener('focus', () => {\n      this._pauseFlag &= ~PAUSED_BY_BLUR;\n    });\n  }\n\n  connectedCallback() {\n    this._pauseFlag &= ~PAUSED_BY_CONNECTION;\n    if (!document.hasFocus()) {\n      this._pauseFlag |= PAUSED_BY_BLUR;\n    }\n    if (this.noautoplay) {\n      this._pauseFlag |= PAUSED_BY_USER;\n    }\n    this.update();\n  }\n\n  disconnectedCallback() {\n    this._pauseFlag |= PAUSED_BY_CONNECTION;\n  }\n\n  get _pauseFlag() {\n    return this.__pauseFlag;\n  }\n\n  set _pauseFlag(value) {\n    if (this.__pauseFlag === value) {\n      return;\n    }\n    this.__pauseFlag = value;\n    if (this.__pauseFlag) {\n      Ticker.delete(this._updateBinded);\n    } else {\n      Ticker.add(this._updateBinded);\n    }\n  }\n\n  /**\n   * Automatically pause element at initialization.\n   * @type {Boolean}\n   */\n  get noautoplay() {\n    return this.hasAttribute('noautoplay');\n  }\n\n  set noautoplay(value) {\n    if (value) {\n      this.setAttribute('noautoplay', '');\n    } else {\n      this.removeAttribute('noautoplay');\n    }\n  }\n\n  /**\n   * Play element.\n   */\n  play() {\n    this._pauseFlag &= ~PAUSED_BY_USER;\n  }\n\n  /**\n   * Pause element.\n   */\n  pause() {\n    this._pauseFlag |= PAUSED_BY_USER;\n  }\n\n  /**\n   * Tells whether the element is paused.\n   * @type {Boolean}\n   * @readonly\n   */\n  get paused() {\n    return !!this._pauseFlag;\n  }\n\n  /**\n   * Interface method to extend where to put the code logic.\n   */\n  update() { }\n}\n\nexport default AnimationTickerElement;\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as mat4 from '../../../gl-matrix/esm/mat4.js';\n\nexport default class Matrix4 extends Float32Array {\n  constructor(array = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]) {\n    super(array);\n    return this;\n  }\n\n  set x(value) {\n    this[12] = value;\n  }\n\n  get x() {\n    return this[12];\n  }\n\n  set y(value) {\n    this[13] = value;\n  }\n\n  get y() {\n    return this[13];\n  }\n\n  set z(value) {\n    this[14] = value;\n  }\n\n  get z() {\n    return this[14];\n  }\n\n  set w(value) {\n    this[15] = value;\n  }\n\n  get w() {\n    return this[15];\n  }\n\n  set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    if (m00.length) {\n      return this.copy(m00);\n    }\n    mat4.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n    return this;\n  }\n\n  translate(vector3, matrix4 = this) {\n    mat4.translate(this, matrix4, vector3);\n    return this;\n  }\n\n  rotateX(value, matrix4 = this) {\n    mat4.rotateX(this, matrix4, value);\n    return this;\n  }\n\n  rotateY(value, matrix4 = this) {\n    mat4.rotateY(this, matrix4, value);\n    return this;\n  }\n\n  rotateZ(value, matrix4 = this) {\n    mat4.rotateZ(this, matrix4, value);\n    return this;\n  }\n\n  scale(value, matrix4 = this) {\n    mat4.scale(this, matrix4, typeof value === 'number' ? [value, value, value] : value);\n    return this;\n  }\n\n  multiply(matrix4a, matrix4b) {\n    if (matrix4b) {\n      mat4.multiply(this, matrix4a, matrix4b);\n    } else {\n      mat4.multiply(this, this, matrix4a);\n    }\n    return this;\n  }\n\n  identity() {\n    mat4.identity(this);\n    return this;\n  }\n\n  copy(matrix4) {\n    mat4.copy(this, matrix4);\n    return this;\n  }\n\n  fromPerspective({ fov, aspectRatio, near, far }) {\n    mat4.perspective(this, fov, aspectRatio, near, far);\n    return this;\n  }\n\n  fromQuaternion(quaternion) {\n    mat4.fromQuat(this, quaternion);\n    return this;\n  }\n\n  setPosition(vector3) {\n    this.x = vector3[0];\n    this.y = vector3[1];\n    this.z = vector3[2];\n    return this;\n  }\n\n  invert(matrix4 = this) {\n    mat4.invert(this, matrix4);\n    return this;\n  }\n}\n","import Matrix4 from '../math/Matrix4.js';\n\nexport default class Camera {\n  constructor({ near = 0.01, far = 1000, aspectRatio = 1, fov = Math.PI / 3 } = {}) {\n    this._near = near;\n    this._far = far;\n    this._aspectRatio = aspectRatio;\n    this._fov = fov;\n\n    this.transform = new Matrix4();\n    this._inverseTransform = new Matrix4();\n    this._projection = new Matrix4();\n    this._projectionView = new Matrix4();\n\n    this._updateProjection();\n  }\n\n  set near(value) {\n    this._near = value;\n    this._updateProjection();\n  }\n\n  get near() {\n    return this._near;\n  }\n\n  set far(value) {\n    this._far = value;\n    this._updateProjection();\n  }\n\n  get far() {\n    return this._far;\n  }\n\n  set fov(value) {\n    this._fov = value;\n    this._updateProjection();\n  }\n\n  get fov() {\n    return this._fov;\n  }\n\n  set aspectRatio(value) {\n    this._aspectRatio = value;\n    this._updateProjection();\n  }\n\n  get aspectRatio() {\n    return this._aspectRatio;\n  }\n\n  get inverseTransform() {\n    return this._inverseTransform.invert(this.transform);\n  }\n\n  get projection() {\n    return this._projection;\n  }\n\n  get projectionView() {\n    return this._projectionView.set(this.projection).multiply(this.inverseTransform);\n  }\n\n  _updateProjection() {\n    this._projection.fromPerspective(this);\n  }\n}\n\nObject.defineProperty(Camera.prototype, 'near', { enumerable: true });\nObject.defineProperty(Camera.prototype, 'far', { enumerable: true });\nObject.defineProperty(Camera.prototype, 'fov', { enumerable: true });\nObject.defineProperty(Camera.prototype, 'aspectRatio', { enumerable: true });\nObject.defineProperty(Camera.prototype, 'inverseTransform', { enumerable: true });\nObject.defineProperty(Camera.prototype, 'projection', { enumerable: true });\nObject.defineProperty(Camera.prototype, 'projectionView', { enumerable: true });\n","// From https://github.com/mrdoob/three.js/blob/master/src/geometries/BoxGeometry.js\n\nexport default class BoxMesh {\n  constructor({\n    width = 1,\n    height = 1,\n    depth = 1,\n    widthSegments = 1,\n    heightSegments = 1,\n    depthSegments = 1,\n    positions = true,\n    normals = true,\n    uvs = true,\n    indices = true,\n  } = {}) {\n    const indicesArray = [];\n    const verticesArray = [];\n    const normalsArray = [];\n    const uvsArray = [];\n\n    let numberOfVertices = 0;\n\n    buildPlane('z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments);\n    buildPlane('z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments);\n    buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments);\n    buildPlane('x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments);\n    buildPlane('x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments);\n    buildPlane('x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments);\n\n    if (positions) {\n      this.positions = new Float32Array(verticesArray);\n    }\n\n    if (normals) {\n      this.normals = new Float32Array(normalsArray);\n    }\n\n    if (uvs) {\n      this.uvs = new Float32Array(uvsArray);\n    }\n\n    if (indices) {\n      if (indicesArray.length > 65536) {\n        this.indices = new Uint32Array(indicesArray);\n      } else if (indicesArray.length > 256) {\n        this.indices = new Uint16Array(indicesArray);\n      } else {\n        this.indices = new Uint8Array(indicesArray);\n      }\n    }\n\n    function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY) {\n      const segmentWidth = width / gridX;\n      const segmentHeight = height / gridY;\n\n      const widthHalf = width / 2;\n      const heightHalf = height / 2;\n      const depthHalf = depth / 2;\n\n      const gridX1 = gridX + 1;\n      const gridY1 = gridY + 1;\n\n      let vertexCounter = 0;\n\n      let ix; let iy;\n\n      const vector = {\n        x: 0,\n        y: 0,\n        z: 0,\n      };\n\n      for (iy = 0; iy < gridY1; iy++) {\n        const y = iy * segmentHeight - heightHalf;\n\n        for (ix = 0; ix < gridX1; ix++) {\n          const x = ix * segmentWidth - widthHalf;\n\n          vector[u] = x * udir;\n          vector[v] = y * vdir;\n          vector[w] = depthHalf;\n\n          if (positions) {\n            verticesArray.push(vector.x, vector.y, vector.z);\n          }\n\n          vector[u] = 0;\n          vector[v] = 0;\n          vector[w] = depth > 0 ? 1 : - 1;\n\n          if (normals) {\n            normalsArray.push(vector.x, vector.y, vector.z);\n          }\n\n          if (uvs) {\n            uvsArray.push(ix / gridX);\n            uvsArray.push(1 - (iy / gridY));\n          }\n\n          vertexCounter += 1;\n        }\n      }\n\n      if (indices) {\n        for (iy = 0; iy < gridY; iy++) {\n          for (ix = 0; ix < gridX; ix++) {\n            const a = numberOfVertices + ix + gridX1 * iy;\n            const b = numberOfVertices + ix + gridX1 * (iy + 1);\n            const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n            const d = numberOfVertices + (ix + 1) + gridX1 * iy;\n\n            indicesArray.push(a, b, d);\n            indicesArray.push(b, c, d);\n          }\n        }\n      }\n\n      numberOfVertices += vertexCounter;\n    }\n  }\n}\n","export default class GLVertexArray {\n  constructor({\n    gl,\n    mesh = undefined,\n    program = undefined,\n  } = { gl }) {\n    this.gl = gl;\n\n    const extension = gl.getExtension('OES_vertex_array_object');\n    if (extension) {\n      this.gl.createVertexArray = extension.createVertexArrayOES.bind(extension);\n      this.gl.bindVertexArray = extension.bindVertexArrayOES.bind(extension);\n    }\n\n    this._vertexArray = this.gl.createVertexArray();\n\n    if (mesh && program) {\n      this.add({\n        mesh,\n        program,\n      });\n    }\n  }\n\n  add({\n    mesh = undefined,\n    program = undefined,\n  } = {}) {\n    this.bind();\n    program.attributes.set(mesh.attributes);\n    if (mesh.indices) {\n      mesh.indices.buffer.bind();\n    }\n    this.unbind();\n  }\n\n  bind() {\n    this.gl.bindVertexArray(this._vertexArray);\n  }\n\n  unbind() {\n    this.gl.bindVertexArray(null);\n  }\n}\n","export default class GLTexture {\n  constructor({\n    gl,\n    data = undefined,\n    width = undefined,\n    height = undefined,\n    target = gl.TEXTURE_2D,\n    level = 0,\n    internalFormat = gl.RGBA8 || gl.RGBA,\n    format = gl.RGBA,\n    type = gl.UNSIGNED_BYTE,\n    minFilter = gl.LINEAR,\n    magFilter = gl.LINEAR,\n    wrapS = gl.CLAMP_TO_EDGE,\n    wrapT = gl.CLAMP_TO_EDGE,\n    flipY = false,\n    generateMipmap = true,\n  }) {\n    this.gl = gl;\n    this._texture = this.gl.createTexture();\n    this._width = width;\n    this._height = height;\n    this._dataWidth = undefined;\n    this._dataHeight = undefined;\n    this._target = target;\n    this._unit = 0;\n\n    this.level = level;\n    this.internalFormat = internalFormat;\n    this.format = format;\n    this.type = type;\n    this.minFilter = minFilter;\n    this.magFilter = magFilter;\n    this.wrapS = wrapS;\n    this.wrapT = wrapT;\n    this.flipY = flipY;\n    this.data = data;\n\n    if (this.data && generateMipmap) {\n      this.generateMipmap();\n    }\n  }\n\n  generateMipmap() {\n    this.bind();\n    this.gl.generateMipmap(this._target);\n    this.unbind();\n  }\n\n  set data(value) {\n    this._data = value;\n\n    if (this._data && (this._data.length === undefined)) {\n      this._dataWidth = this._data.width || this._data.videoWidth;\n      this._dataHeight = this._data.height || this._data.videoHeight;\n    }\n\n    this.bind();\n    if (this.gl instanceof WebGLRenderingContext && this._data && this._data.length === undefined) {\n      this.gl.texImage2D(this._target, this.level, this.internalFormat, this.format, this.type, this._data);\n    } else {\n      this.gl.texImage2D(this._target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, this._data);\n    }\n    this.unbind();\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  set width(value) {\n    this._width = value;\n    this.data = this.data;\n  }\n\n  get width() {\n    return this._width || this._dataWidth;\n  }\n\n  set height(value) {\n    this._height = value;\n    this.data = this.data;\n  }\n\n  get height() {\n    return this._height || this._dataHeight;\n  }\n\n  set minFilter(value) {\n    if (this._minFilter === value) {\n      return;\n    }\n    this._minFilter = value;\n    this.bind();\n    this.gl.texParameteri(this._target, this.gl.TEXTURE_MIN_FILTER, this._minFilter);\n    this.unbind();\n  }\n\n  get minFilter() {\n    return this._minFilter;\n  }\n\n  set magFilter(value) {\n    if (this._magFilter === value) {\n      return;\n    }\n    this._magFilter = value;\n    this.bind();\n    this.gl.texParameteri(this._target, this.gl.TEXTURE_MAG_FILTER, this._magFilter);\n    this.unbind();\n  }\n\n  get magFilter() {\n    return this._magFilter;\n  }\n\n  set wrapS(value) {\n    if (this._wrapS === value) {\n      return;\n    }\n    this._wrapS = value;\n    this.bind();\n    this.gl.texParameteri(this._target, this.gl.TEXTURE_WRAP_S, this._wrapS);\n    this.unbind();\n  }\n\n  get wrapS() {\n    return this._wrapS;\n  }\n\n  set wrapT(value) {\n    if (this._wrapT === value) {\n      return;\n    }\n    this._wrapT = value;\n    this.bind();\n    this.gl.texParameteri(this._target, this.gl.TEXTURE_WRAP_T, this._wrapT);\n    this.unbind();\n  }\n\n  get wrapT() {\n    return this._wrapT;\n  }\n\n  set flipY(value) {\n    if (this._flipY === value) {\n      return;\n    }\n    this._flipY = value;\n    this.bind();\n    this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this._flipY);\n    this.unbind();\n  }\n\n  get flipY() {\n    return this._flipY;\n  }\n\n  bind({ unit = 0 } = {}) {\n    this._unit = unit;\n    this.gl.activeTexture(this.gl.TEXTURE0 + unit);\n    this.gl.bindTexture(this._target, this._texture);\n  }\n\n  unbind({ unit = this._unit } = {}) {\n    this.gl.activeTexture(this.gl.TEXTURE0 + unit);\n    this.gl.bindTexture(this._target, null);\n  }\n\n  clone() {\n    return new GLTexture(this);\n  }\n}\n","export default class GLBuffer {\n  constructor({\n    gl,\n    data = null,\n    target = gl.ARRAY_BUFFER,\n    usage = gl.STATIC_DRAW,\n  } = { gl }) {\n    this.gl = gl;\n    this.target = target;\n    this.usage = usage;\n\n    this._buffer = this.gl.createBuffer();\n\n    if (data) {\n      this.data = data;\n    }\n  }\n\n  set data(value) {\n    this._data = value;\n\n    this.bind();\n    this.gl.bufferData(this.target, this._data, this.usage);\n    this.unbind();\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  bind({\n    target = this.target,\n    index = undefined,\n    offset = 0,\n    size = undefined,\n  } = {}) {\n    if (index === undefined) {\n      this.gl.bindBuffer(target, this._buffer);\n    } else if (size === undefined) {\n      this.gl.bindBufferBase(target, index, this._buffer);\n    } else {\n      this.gl.bindBufferRange(target, index, this._buffer, offset, size);\n    }\n  }\n\n  unbind({\n    target = this.target,\n    index = undefined,\n    offset = 0,\n    size = undefined,\n  } = {}) {\n    if (index === undefined) {\n      this.gl.bindBuffer(target, null);\n    } else if (size === undefined) {\n      this.gl.bindBufferBase(target, index, null);\n    } else {\n      this.gl.bindBufferRange(target, index, null, offset, size);\n    }\n  }\n}\n","import GLBuffer from './GLBuffer.js';\n\nexport default class GLVertexAttribute {\n  constructor({\n    gl,\n    data = undefined,\n    buffer = new GLBuffer({\n      gl,\n    }),\n    size = 1,\n    type = undefined,\n    offset = 0,\n    normalized = false,\n    stride = 0,\n    count = undefined,\n    divisor = 0,\n  }) {\n    this.gl = gl;\n    this.buffer = buffer;\n    this.size = size;\n    this.type = type;\n    this.offset = offset;\n    this.normalized = normalized;\n    this.stride = stride;\n    this.count = count;\n    this.divisor = divisor;\n\n    if (data) {\n      this.data = data;\n    }\n  }\n\n  set count(value) {\n    this._count = value;\n  }\n\n  get count() {\n    return this._count === undefined ? this.data.length / this.size : this._count;\n  }\n\n  set type(value) {\n    this._type = value;\n  }\n\n  get type() {\n    return this._type || this._dataType;\n  }\n\n  set data(value) {\n    this.buffer.data = value;\n\n    if (this.data instanceof Float32Array || this.data instanceof Float64Array) {\n      this._dataType = this.gl.FLOAT;\n    } else if (this.data instanceof Int8Array) {\n      this._dataType = this.gl.BYTE;\n    } else if (this.data instanceof Int16Array) {\n      this._dataType = this.gl.SHORT;\n    } else if (this.data instanceof Int32Array) {\n      this._dataType = this.gl.INT;\n    } else if (this.data instanceof Uint8Array) {\n      this._dataType = this.gl.UNSIGNED_BYTE;\n    } else if (this.data instanceof Uint16Array) {\n      this._dataType = this.gl.UNSIGNED_SHORT;\n    } else if (this.data instanceof Uint32Array) {\n      this._dataType = this.gl.UNSIGNED_INT;\n    }\n  }\n\n  get data() {\n    return this.buffer.data;\n  }\n}\n","import GLBuffer from './GLBuffer.js';\nimport GLVertexAttribute from './GLVertexAttribute.js';\n\nexport default class GLMesh {\n  constructor({\n    gl,\n    positions = undefined,\n    normals = undefined,\n    uvs = undefined,\n    attributes = {},\n    indices = undefined,\n  }) {\n    this.gl = gl;\n\n    this.gl.getExtension('OES_element_index_uint');\n\n    this._drawElementsInstanced = () => { };\n    this._drawArraysInstanced = () => { };\n    const instancedArraysExtension = this.gl.getExtension('ANGLE_instanced_arrays');\n    if (instancedArraysExtension) {\n      this._drawElementsInstanced = instancedArraysExtension.drawElementsInstancedANGLE.bind(instancedArraysExtension);\n      this._drawArraysInstanced = instancedArraysExtension.drawArraysInstancedANGLE.bind(instancedArraysExtension);\n    } else if (this.gl.drawElementsInstanced) {\n      this._drawElementsInstanced = this.gl.drawElementsInstanced.bind(this.gl);\n      this._drawArraysInstanced = this.gl.drawArraysInstanced.bind(this.gl);\n    }\n\n    this.attributes = new Map(attributes.entries ? attributes : Object.entries(attributes));\n\n    if (positions) {\n      this.attributes.set('position', new GLVertexAttribute({\n        gl,\n        data: positions,\n        size: 3,\n      }));\n    }\n\n    if (normals) {\n      this.attributes.set('normal', new GLVertexAttribute({\n        gl,\n        data: normals,\n        size: 3,\n      }));\n    }\n\n    if (uvs) {\n      this.attributes.set('uv', new GLVertexAttribute({\n        gl,\n        data: uvs,\n        size: 2,\n      }));\n    }\n\n    for (const [key, value] of this.attributes) {\n      if (!(value instanceof GLVertexAttribute)) {\n        this.attributes.set(key, new GLVertexAttribute(Object.assign({ gl }, value)));\n      }\n    }\n\n    if (indices && !(this.indices instanceof GLVertexAttribute)) {\n      this.indices = new GLVertexAttribute(Object.assign({\n        gl: this.gl,\n        buffer: new GLBuffer({\n          gl: this.gl,\n          target: this.gl.ELEMENT_ARRAY_BUFFER,\n        }),\n      }, indices.length !== undefined ? { data: indices } : indices));\n    }\n  }\n\n  draw({\n    mode = this.gl.TRIANGLES,\n    elements = !!this.indices,\n    count = elements ? this.indices.count : this.attributes.get('position').count,\n    offset = this.indices ? this.indices.offset : 0,\n    type = elements ? this.indices.type : null,\n    first = 0,\n    instanceCount = undefined,\n  } = {}) {\n    if (elements) {\n      if (instanceCount !== undefined) {\n        this._drawElementsInstanced(mode, count, type, offset, instanceCount);\n      } else {\n        this.gl.drawElements(mode, count, type, offset);\n      }\n    } else {\n      if (instanceCount !== undefined) {\n        this._drawArraysInstanced(mode, first, count, instanceCount);\n      } else {\n        this.gl.drawArrays(mode, first, count);\n      }\n    }\n  }\n}\n","export default class Shader {\n  static addChunks(string = 'void main() {}', chunks) {\n    for (const [key, chunk] of chunks) {\n      switch (key) {\n        case 'start':\n          string = string.replace(/^(#version .*?\\n(\\s*precision highp float;\\s)?)?([\\s\\S]*)/, `$1\\n${chunk}\\n$3`);\n          break;\n        case 'end':\n          string = string.replace(/(}\\s*$)/, `\\n${chunk}\\n$1`);\n          break;\n        case 'main':\n          string = string.replace(/(\\bvoid\\b +\\bmain\\b[\\s\\S]*?{\\s*)/, `$1\\n${chunk}\\n`);\n          break;\n        default:\n          string = string.replace(key, chunk);\n      }\n    }\n    return string;\n  }\n\n  constructor({\n    vertex = `#version 300 es\n      void main() {\n        gl_Position = vec4(0., 0., 0., 1.);\n      }\n    `,\n    fragment = `#version 300 es\n      precision highp float;\n\n      out vec4 fragColor;\n\n      void main() {\n        fragColor = vec4(1.);\n      }\n    `,\n    vertexChunks = [],\n    fragmentChunks = [],\n    uniforms = {},\n    dataTypeConctructors = {\n      Vector2: class Vector2 extends Float32Array {\n        constructor() {\n          super(2);\n        }\n      },\n      Vector3: class Vector3 extends Float32Array {\n        constructor() {\n          super(3);\n        }\n      },\n      Vector4: class Vector4 extends Float32Array {\n        constructor() {\n          super(4);\n        }\n      },\n      Matrix3: class Matrix3 extends Float32Array {\n        constructor() {\n          super([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n        }\n      },\n      Matrix4: class Matrix4 extends Float32Array {\n        constructor() {\n          super([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n        }\n      },\n      Texture: class Texture { },\n      TextureCube: class TextureCube { },\n    },\n  } = {}) {\n    this.uniforms = uniforms;\n    this.uniformTypes = new Map();\n\n    this._dataTypeConctructors = dataTypeConctructors;\n\n    this._vertex = Shader.addChunks(vertex, vertexChunks);\n    this._fragment = Shader.addChunks(fragment, fragmentChunks);\n\n    this._parseUniforms();\n  }\n\n  get vertex() {\n    return this._vertex;\n  }\n  set vertex(value) {\n    this._vertex = value;\n    this._parseUniforms();\n  }\n\n  get fragment() {\n    return this._fragment;\n  }\n  set fragment(value) {\n    this._fragment = value;\n    this._parseUniforms();\n  }\n\n  _createUniform(name, type, arrayLength) {\n    if (!arrayLength) {\n      this.uniformTypes.set(name, type);\n    } else {\n      this.uniformTypes.set(name, `${type}array`);\n      for (let index = 0; index < arrayLength; index++) {\n        this.uniformTypes.set(`${name}[${index}]`, type);\n      }\n    }\n\n    let value;\n    let typeMatch;\n\n    if (/float|double/.test(type)) {\n      if (isNaN(arrayLength)) {\n        value = 0;\n      } else {\n        value = new Array(arrayLength).fill(0);\n      }\n    } else if (/int|uint/.test(type)) {\n      if (isNaN(arrayLength)) {\n        value = 0;\n      } else {\n        value = new Array(arrayLength).fill(0);\n      }\n    } else if (/sampler2D/.test(type)) {\n      if (isNaN(arrayLength)) {\n        value = new this._dataTypeConctructors['Texture']();\n      } else {\n        value = new Array(arrayLength).fill(undefined).map((value) => new this._dataTypeConctructors['Texture']());\n      }\n    } else if (/samplerCube/.test(type)) {\n      if (isNaN(arrayLength)) {\n        value = new this._dataTypeConctructors['TextureCube']();\n      } else {\n        value = new Array(arrayLength).fill(undefined).map((value) => new this._dataTypeConctructors['TextureCube']());\n      }\n    } else if ((typeMatch = /(.?)vec(\\d)/.exec(type))) {\n      const vectorLength = typeMatch[2];\n      if (isNaN(arrayLength)) {\n        value = new this._dataTypeConctructors[`Vector${vectorLength}`]();\n      } else {\n        value = new Array(arrayLength).fill(undefined).map((value) => new this._dataTypeConctructors[`Vector${vectorLength}`]());\n      }\n    } else if ((typeMatch = /mat(\\d)/.exec(type))) {\n      const matrixLength = typeMatch[1];\n      if (isNaN(arrayLength)) {\n        value = new this._dataTypeConctructors[`Matrix${matrixLength}`]();\n      } else {\n        value = new Array(arrayLength).fill(undefined).map((value) => new this._dataTypeConctructors[`Matrix${matrixLength}`]());\n      }\n    } else {\n      value = undefined;\n    }\n\n    return value;\n  }\n\n  // Parse shader strings to extract uniforms\n\n  _parseUniforms() {\n    const newUniforms = {};\n    this.uniformTypes.clear();\n\n    for (const shaderString of [this.vertex, this.fragment]) {\n      const structures = new Map();\n\n      const structRegExp = /struct\\s*(.*)\\s*{\\s*([\\s\\S]*?)}/g;\n      const structMemberRegExp = /^\\s*(.[^ ]+) (.[^ ;[\\]]+)\\[? *(\\d+)? *\\]?/gm;\n      let structMatch;\n      while ((structMatch = structRegExp.exec(shaderString))) {\n        const structName = structMatch[1];\n        const structString = structMatch[2];\n\n        const structure = {};\n        let structMemberMatch;\n        while ((structMemberMatch = structMemberRegExp.exec(structString))) {\n          const [, type, name, arrayLengthStr] = structMemberMatch;\n          const arrayLength = parseInt(arrayLengthStr);\n          structure[name] = {\n            type,\n            arrayLength,\n          };\n        }\n\n        structures.set(structName, structure);\n      }\n\n      const uniformsRegExp = /^\\s*uniform (highp|mediump|lowp)? *(.[^ ]+) (.[^ ;[\\]]+)\\[? *(\\d+)? *\\]?/gm;\n      let uniformMatch;\n      while ((uniformMatch = uniformsRegExp.exec(shaderString))) {\n        const [, , type, name, arrayLengthStr] = uniformMatch;\n\n        const structure = structures.get(type);\n        if (structure) {\n          for (const key of Object.keys(structure)) {\n            const name = `${name}.${key}`;\n            newUniforms[name] = this._createUniform(name, structure[key].type, structure[key].arrayLength);\n          }\n        } else {\n          const arrayLength = parseInt(arrayLengthStr);\n          newUniforms[name] = this._createUniform(name, type, arrayLength);\n        }\n      }\n    }\n\n    for (const [key, value] of Object.entries(newUniforms)) {\n      if (!(key in this.uniforms)) {\n        this.uniforms[key] = value;\n      }\n    }\n\n    for (const key of Object.keys(this.uniforms)) {\n      if (!(key in newUniforms)) {\n        delete this.uniforms[key];\n      }\n    }\n  }\n}\n","import Shader from '../3d/Shader.js';\n\nexport default class GLProgram {\n  constructor({\n    gl,\n    shader = new Shader(),\n    transformFeedbackVaryings = undefined,\n  } = { gl }) {\n    this.gl = gl;\n\n    this._shader = shader instanceof Shader ? shader : new Shader(shader);\n    this._program = gl.createProgram();\n    this._attachedShaders = new Map();\n    this._textureUnits = new Map();\n\n    this._vertexAttribDivisor = () => { };\n    const instancedArraysExtension = this.gl.getExtension('ANGLE_instanced_arrays');\n    if (instancedArraysExtension) {\n      this._vertexAttribDivisor = instancedArraysExtension.vertexAttribDivisorANGLE.bind(instancedArraysExtension);\n    } else if (this.gl.vertexAttribDivisor) {\n      this._vertexAttribDivisor = this.gl.vertexAttribDivisor.bind(this.gl);\n    }\n\n    const self = this;\n\n    class Attributes extends Map {\n      set(name, { buffer = undefined, location = self._attributesLocations.get(name), size = undefined, type = gl.FLOAT, normalized = false, stride = 0, offset = 0, divisor = 0 } = {}) {\n        if (name instanceof Map) {\n          for (const [key, value] of name) {\n            this.set(key, value);\n          }\n          return;\n        }\n        buffer.bind();\n        if (location === undefined) {\n          location = gl.getAttribLocation(self._program, name);\n          if (location === -1) {\n            console.warn(`Attribute \"${name}\" is missing or never used`);\n          }\n          self._attributesLocations.set(name, location);\n        }\n        gl.enableVertexAttribArray(location);\n\n        if (type === gl.FLOAT || type === gl.HALF_FLOAT) {\n          gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n        } else {\n          gl.vertexAttribIPointer(location, size, type, normalized, stride, offset);\n        }\n\n        buffer.unbind();\n        self._vertexAttribDivisor(location, divisor);\n        super.set(name, { buffer, size, type, normalized, stride, offset });\n      }\n    }\n\n    const uploadUniform = (name, value) => {\n      let location = self._uniformLocations.get(name);\n      if (location === undefined) {\n        location = gl.getUniformLocation(self._program, name);\n        self._uniformLocations.set(name, location);\n      }\n\n      if (location === null) {\n        return;\n      }\n      const type = self.uniformTypes.get(name);\n\n      if (type === 'float' || type === 'bool') {\n        gl.uniform1f(location, value);\n      } else if (type === 'vec2') {\n        gl.uniform2fv(location, value);\n      } else if (type === 'vec3') {\n        gl.uniform3fv(location, value);\n      } else if (type === 'vec4') {\n        gl.uniform4fv(location, value);\n      } else if (type === 'int') {\n        gl.uniform1i(location, value);\n      } else if (type === 'ivec2') {\n        gl.uniform2iv(location, value);\n      } else if (type === 'ivec3') {\n        gl.uniform3iv(location, value);\n      } else if (type === 'ivec4') {\n        gl.uniform4iv(location, value);\n      } else if (type === 'mat3') {\n        gl.uniformMatrix3fv(location, false, value);\n      } else if (type === 'mat4') {\n        gl.uniformMatrix4fv(location, false, value);\n      } else if (type.startsWith('sampler')) {\n        gl.uniform1i(location, self._textureUnits.get(name));\n      } else if (type.endsWith('array')) {\n        for (let i = 0; i < value.length; i++) {\n          uploadUniform(`${name}[${i}]`, value[i]);\n        }\n      } else if (value instanceof Object) {\n        for (const key of Object.keys(value)) {\n          uploadUniform(`${name}.${key}`, value[key]);\n        }\n      }\n    };\n\n    class Uniforms extends Map {\n      set(name, value) {\n        if (value === undefined) {\n          return;\n        }\n\n        uploadUniform(name, value);\n\n        self._shader.uniforms[name] = value;\n        super.set(name, value);\n      }\n    }\n\n    if (transformFeedbackVaryings) {\n      this.gl.transformFeedbackVaryings(this._program, transformFeedbackVaryings, gl.INTERLEAVED_ATTRIBS);\n    }\n\n    this.attributes = new Attributes();\n    this.uniforms = new Uniforms();\n\n    this._updateShader(this.gl.VERTEX_SHADER, this._shader.vertex);\n    this._updateShader(this.gl.FRAGMENT_SHADER, this._shader.fragment);\n  }\n\n  set vertexShader(value) {\n    this._shader.vertex = value;\n    this._updateShader(this.gl.VERTEX_SHADER, this._shader.vertex);\n  }\n\n  get vertexShader() {\n    return this._shader.vertex;\n  }\n\n  set fragmentShader(value) {\n    this._shader.fragment = value;\n    this._updateShader(this.gl.FRAGMENT_SHADER, this._shader.fragment);\n  }\n\n  get fragmentShader() {\n    return this._shader.fragment;\n  }\n\n  get uniformTypes() {\n    return this._shader.uniformTypes;\n  }\n\n  get textureUnits() {\n    return this._textureUnits;\n  }\n\n  use() {\n    this.gl.useProgram(this._program);\n  }\n\n  _updateShader(type, source) {\n    if (!source) {\n      return;\n    }\n\n    if (this.gl.getParameter(this.gl.VERSION).startsWith('WebGL 1.0')) {\n      source = source.replace(/#version.*?\\n/g, '');\n      source = source.replace(/\\btexture\\b/g, 'texture2D');\n      if (type === this.gl.VERTEX_SHADER) {\n        source = source.replace(/(^\\s*)\\bin\\b/gm, '$1attribute');\n        source = source.replace(/(^\\s*)\\bout\\b/gm, '$1varying');\n      } else {\n        source = source.replace(/(^\\s*)\\bin\\b/gm, '$1varying');\n        const results = /out vec4 (.*?);/.exec(source);\n        if (results) {\n          const fragColorName = results[1];\n          source = source.replace(/out.*?;/, '');\n          source = source.replace(new RegExp(`\\\\b${fragColorName}\\\\b`, 'g'), 'gl_FragColor');\n        }\n      }\n    }\n\n    const shader = this.gl.createShader(type);\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader);\n\n    const shaderInfoLog = this.gl.getShaderInfoLog(shader);\n    if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n      const lineNumberResults = /ERROR: 0:(\\d+):/.exec(shaderInfoLog);\n      if (lineNumberResults) {\n        const lineNumber = parseFloat(lineNumberResults[1]);\n        const shaderLines = source.split('\\n');\n        const typeName = type === this.gl.VERTEX_SHADER ? 'Vertex Shader' : 'Fragment Shader';\n        console.groupCollapsed(`${typeName} source`);\n        console.warn(source);\n        console.groupEnd();\n        throw new Error(`${typeName}: ${shaderInfoLog}\\nat: ${shaderLines[lineNumber - 1].replace(/^\\s*/, '')}`);\n      } else {\n        throw new Error(shaderInfoLog);\n      }\n    } else if (shaderInfoLog) {\n      console.warn(shaderInfoLog);\n    }\n\n    const attachedShader = this._attachedShaders.get(type);\n    if (attachedShader) {\n      this.gl.detachShader(this._program, attachedShader);\n      this.gl.deleteShader(attachedShader);\n    }\n\n    this.gl.attachShader(this._program, shader);\n    this.gl.deleteShader(shader);\n    this._attachedShaders.set(type, shader);\n\n    if (this._attachedShaders.size === 2) {\n      this.gl.linkProgram(this._program);\n      const programInfoLog = this.gl.getProgramInfoLog(this._program);\n      if (!this.gl.getProgramParameter(this._program, this.gl.LINK_STATUS)) {\n        throw new Error(programInfoLog);\n      } else if (programInfoLog) {\n        console.warn(programInfoLog);\n      }\n\n      // TODO: Check when issue is resolved on Safari and comment out\n\n      // for (let [type, attachedShader] of this._attachedShaders) {\n      //   this.gl.detachShader(this._program, attachedShader);\n      //   this.gl.deleteShader(attachedShader);\n      //   this._attachedShaders.delete(type);\n      // }\n\n      this._attributesLocations = new Map();\n      this._uniformLocations = new Map();\n\n      this.use();\n      this.uniforms.clear();\n      this._textureUnits.clear();\n      let unit = 0;\n      for (const [key, value] of Object.entries(this._shader.uniforms)) {\n        if (this.uniformTypes.get(key).startsWith('sampler')) {\n          this._textureUnits.set(key, unit);\n          unit++;\n        }\n        this.uniforms.set(key, value);\n      }\n    }\n  }\n}\n","import BoxMesh from '../../3d/mesh/BoxMesh.js';\nimport GLObject from '../GLObject.js';\nimport GLMesh from '../GLMesh.js';\nimport GLProgram from '../GLProgram.js';\n\nexport default class GLBoxObject extends GLObject {\n  constructor({\n    gl,\n    width = undefined,\n    height = undefined,\n    depth = undefined,\n    widthSegments = undefined,\n    heightSegments = undefined,\n    depthSegments = undefined,\n    normals = false,\n    uvs = false,\n    attributes = {},\n    program = new GLProgram({\n      gl,\n      shader: {\n        vertexChunks: [\n          ['start', `\n            in vec3 position;\n          `],\n          ['end', `\n            gl_Position = vec4(position, 1.);\n          `],\n        ],\n      },\n    }),\n  }) {\n    super({\n      gl,\n      mesh: new GLMesh(Object.assign({\n        gl,\n        attributes,\n      }, new BoxMesh({\n        width,\n        height,\n        depth,\n        widthSegments,\n        heightSegments,\n        depthSegments,\n        normals,\n        uvs,\n      }))),\n      program,\n    });\n  }\n}\n","import GLVertexArray from './GLVertexArray.js';\nimport GLTexture from './GLTexture.js';\n\nexport default class GLObject {\n  constructor({\n    gl,\n    mesh = undefined,\n    program = undefined,\n    vertexArray = new GLVertexArray({\n      gl,\n      mesh,\n      program,\n    }),\n  }) {\n    this.gl = gl;\n    this.mesh = mesh;\n    this.program = program;\n    this.vertexArray = vertexArray;\n\n    this._boundTextures = new Set();\n  }\n\n  bind() {\n    this.program.use();\n    this.vertexArray.bind();\n    for (const [name, type] of this.program.uniformTypes) {\n      if (type.startsWith('sampler')) {\n        const value = this.program.uniforms.get(name);\n        if (value instanceof GLTexture) {\n          value.bind({\n            unit: this.program.textureUnits.get(name),\n          });\n          this._boundTextures.add(value);\n        }\n      }\n    }\n  }\n\n  draw(options) {\n    options = Object.assign({ bind: true, uniforms: {} }, options);\n    // Todo: Fix double call to Program.use when bind is true\n    // (needed to update texture uniforms before binding them)\n    this.program.use();\n    for (const key of Object.keys(options.uniforms)) {\n      this.program.uniforms.set(key, options.uniforms[key]);\n    }\n    if (options.bind) {\n      this.bind();\n    }\n    this.mesh.draw(options);\n    if (options.bind) {\n      this.unbind();\n    }\n  }\n\n  unbind() {\n    this.vertexArray.unbind();\n    for (const texture of this._boundTextures) {\n      texture.unbind();\n      this._boundTextures.delete(texture);\n    }\n  }\n}\n","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {ReadonlyVec2} a The vec2 point to rotate\r\n * @param {ReadonlyVec2} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {ReadonlyVec2} a The first operand\r\n * @param {ReadonlyVec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as vec2 from '../../../gl-matrix/esm/vec2.js';\n\nexport default class Vector2 extends Float32Array {\n  static distance(vector2a, vector2b) {\n    return vec2.distance(vector2a, vector2b);\n  }\n\n  constructor(array = [0, 0]) {\n    super(array);\n    return this;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = value;\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = value;\n  }\n\n  set(x, y) {\n    vec2.set(this, x, y);\n    return this;\n  }\n\n  copy(vector2) {\n    vec2.copy(this, vector2);\n    return this;\n  }\n\n  add(vector2) {\n    vec2.add(this, this, vector2);\n    return this;\n  }\n\n  multiply(vector2) {\n    vec2.multiply(this, this, vector2);\n    return this;\n  }\n\n  get size() {\n    return vec2.length(this);\n  }\n\n  get squaredSize() {\n    return vec2.squaredLength(this);\n  }\n\n  subtract(vector2) {\n    vec2.subtract(this, this, vector2);\n    return this;\n  }\n\n  negate(vector2 = this) {\n    vec2.negate(this, vector2);\n    return this;\n  }\n\n  cross(vector2a, vector2b) {\n    vec2.cross(this, vector2a, vector2b);\n    return this;\n  }\n\n  scale(value) {\n    vec2.scale(this, this, value);\n    return this;\n  }\n\n  normalize() {\n    return vec2.normalize(this, this);\n  }\n\n  dot(vector2) {\n    return vec2.dot(this, vector2);\n  }\n\n  distance(vector2) {\n    return Vector2.distance(this, vector2);\n  }\n\n  equals(vector2) {\n    return vec2.exactEquals(this, vector2);\n  }\n\n  applyMatrix3(matrix3) {\n    vec2.transformMat3(this, this, matrix3);\n    return this;\n  }\n\n  applyMatrix4(matrix4) {\n    vec2.transformMat4(this, this, matrix4);\n    return this;\n  }\n\n  rotate(vector2, value) {\n    vec2.rotate(this, this, vector2, value);\n  }\n\n  lerp(vector2, value) {\n    vec2.lerp(this, this, vector2, value);\n  }\n\n  clone() {\n    return new Vector2(this);\n  }\n}\n","import Vector2 from '../math/Vector2.js';\nimport Signal from '../util/Signal.js';\nimport Ticker from '../util/Ticker.js';\n\nconst pointers = new Map();\n\nexport default class Pointer extends Vector2 {\n  static get TOUCH_TYPE() {\n    return 'touchtype';\n  }\n\n  static get MOUSE_TYPE() {\n    return 'mousetype';\n  }\n\n  static get(domElement = window) {\n    let pointer = pointers.get(domElement);\n    if (!pointer) {\n      pointer = new Pointer(domElement);\n    }\n    return pointer;\n  }\n\n  get downed() {\n    return this._downed;\n  }\n\n  constructor(domElement) {\n    super();\n\n    this._domElement = domElement || window;\n\n    this.type = Pointer.TOUCH_TYPE;\n\n    this.velocity = new Vector2();\n    this.dragOffset = new Vector2();\n\n    this.centered = new Vector2();\n    this.centeredFlippedY = new Vector2();\n    this.normalized = new Vector2();\n    this.normalizedFlippedY = new Vector2();\n    this.normalizedCentered = new Vector2();\n    this.normalizedCenteredFlippedY = new Vector2();\n\n    this._downed = false;\n\n    pointers.set(this._domElement, this);\n\n    this.onDown = new Signal();\n    this.onMove = new Signal();\n    this.onUp = new Signal();\n    this.onClick = new Signal();\n    this.onTypeChange = new Signal();\n\n    this._preventMouseTypeChange = false;\n\n    this._onPointerMoveBinded = this._onPointerMove.bind(this);\n    this._onPointerDownBinded = this._onPointerDown.bind(this);\n    this._onPointerUpBinded = this._onPointerUp.bind(this);\n\n    this._updateBinded = this._update.bind(this);\n    this._resizeBinded = this.resize.bind(this);\n\n    this._position = new Vector2();\n\n    this.enable();\n  }\n\n  resize() {\n    this._domElementBoundingRect = this._domElement === window ? {\n      left: 0,\n      top: 0,\n      width: window.innerWidth,\n      height: window.innerHeight,\n    } : this._domElement.getBoundingClientRect();\n  }\n\n  _onPointerDown(e) {\n    this.resize();\n    if (e.type === 'touchstart') {\n      this._preventMouseTypeChange = true;\n      this._changeType(Pointer.TOUCH_TYPE);\n    }\n    this._downed = true;\n    this.dragOffset.set(0, 0);\n    this.copy(this._position);\n    this._onPointerEvent(e);\n    this._updatePositions();\n    this.onDown.dispatch(e);\n  }\n\n  _onPointerMove(e) {\n    if (e.type === 'mousemove') {\n      if (this._preventMouseTypeChange) {\n        return;\n      } else {\n        this._changeType(Pointer.MOUSE_TYPE);\n      }\n    }\n    this._onPointerEvent(e);\n    this.onMove.dispatch(e);\n  }\n\n  _onPointerUp(e) {\n    if (!this._downed) {\n      return;\n    }\n    this._downed = false;\n    this._onPointerEvent(e);\n    this._updatePositions();\n    this.onUp.dispatch(e);\n    if (this.dragOffset.size < 4) {\n      this.onClick.dispatch(e);\n    }\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => {\n      this._preventMouseTypeChange = false;\n    }, 2000);\n  }\n\n  _onPointerEvent(e) {\n    if (!!window.TouchEvent && e instanceof window.TouchEvent) {\n      if (e.type === 'touchend') {\n        e = e.changedTouches[0];\n      } else {\n        e = e.touches[0];\n      }\n    }\n    this._position.x = e.clientX - this._domElementBoundingRect.left;\n    this._position.y = e.clientY - this._domElementBoundingRect.top;\n  }\n\n  _changeType(type) {\n    if (this.type === type) {\n      return;\n    }\n    this.type = type;\n    this.disable();\n    this.enable();\n    this.onTypeChange.dispatch(this.type);\n  }\n\n  _update() {\n    if (this.x || this.y) {\n      this.velocity.x = this._position.x - this.x;\n      this.velocity.y = this._position.y - this.y;\n      if (this.downed) {\n        this.dragOffset.add(this.velocity);\n      }\n    }\n\n    this._updatePositions();\n  }\n\n  _updatePositions() {\n    this.x = this._position.x;\n    this.y = this._position.y;\n\n    if (!this.x && !this.y) {\n      return;\n    }\n\n    this.centered.x = this.centeredFlippedY.x = this.x - this._domElementBoundingRect.width * .5;\n    this.centered.y = this.centeredFlippedY.y = this.y - this._domElementBoundingRect.height * .5;\n    this.centeredFlippedY.y *= -1;\n\n    this.normalized.x = this.normalizedFlippedY.x = this.x / this._domElementBoundingRect.width;\n    this.normalized.y = this.normalizedFlippedY.y = this.y / this._domElementBoundingRect.height;\n    this.normalizedFlippedY.y = 1 - this.normalizedFlippedY.y;\n\n    this.normalizedCentered.x = this.normalizedCenteredFlippedY.x = this.normalized.x * 2 - 1;\n    this.normalizedCentered.y = this.normalizedCenteredFlippedY.y = this.normalized.y * 2 - 1;\n    this.normalizedCenteredFlippedY.y *= -1;\n  }\n\n  enable() {\n    this.disable();\n    this.resize();\n    if (this.type === Pointer.TOUCH_TYPE) {\n      this._domElement.addEventListener('touchmove', this._onPointerMoveBinded, { passive: true });\n      window.addEventListener('touchend', this._onPointerUpBinded, { passive: true });\n    } else {\n      this._domElement.addEventListener('mousedown', this._onPointerDownBinded);\n      window.addEventListener('mouseup', this._onPointerUpBinded);\n    }\n    this._domElement.addEventListener('touchstart', this._onPointerDownBinded, { passive: true });\n    this._domElement.addEventListener('mousemove', this._onPointerMoveBinded);\n    window.addEventListener('resize', this._resizeBinded);\n    Ticker.add(this._updateBinded = this._updateBinded || this._update.bind(this));\n  }\n\n  disable() {\n    Ticker.delete(this._updateBinded);\n    this._domElement.removeEventListener('touchstart', this._onPointerDownBinded);\n    this._domElement.removeEventListener('mousedown', this._onPointerDownBinded);\n    this._domElement.removeEventListener('touchmove', this._onPointerMoveBinded);\n    this._domElement.removeEventListener('mousemove', this._onPointerMoveBinded);\n    window.removeEventListener('touchend', this._onPointerUpBinded);\n    window.removeEventListener('mouseup', this._onPointerUpBinded);\n    window.removeEventListener('resize', this._resizeBinded);\n  }\n}\n","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as vec3 from '../../../gl-matrix/esm/vec3.js';\n\nexport default class Vector3 extends Float32Array {\n  constructor(array = [0, 0, 0]) {\n    super(array);\n    return this;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = value;\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = value;\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  set z(value) {\n    this[2] = value;\n  }\n\n  set(x, y, z) {\n    vec3.set(this, x, y, z);\n    return this;\n  }\n\n  copy(vector3) {\n    vec3.copy(this, vector3);\n    return this;\n  }\n\n  add(vector3) {\n    vec3.add(this, this, vector3);\n    return this;\n  }\n\n  get size() {\n    return vec3.length(this);\n  }\n\n  get squaredSize() {\n    return vec3.squaredLength(this);\n  }\n\n  distance(vector3) {\n    return vec3.distance(this, vector3);\n  }\n\n  squaredDistance(vector3) {\n    return vec3.squaredDistance(this, vector3);\n  }\n\n  subtract(vector3) {\n    vec3.subtract(this, this, vector3);\n    return this;\n  }\n\n  negate(vector3 = this) {\n    vec3.negate(this, vector3);\n    return this;\n  }\n\n  cross(vector3a, vector3b) {\n    vec3.cross(this, vector3a, vector3b);\n    return this;\n  }\n\n  scale(value) {\n    vec3.scale(this, this, value);\n    return this;\n  }\n\n  normalize() {\n    vec3.normalize(this, this);\n    return this;\n  }\n\n  dot(vector3) {\n    return vec3.dot(this, vector3);\n  }\n\n  lerp(vector3, value) {\n    return vec3.lerp(this, this, vector3, value);\n  }\n\n  equals(vector3) {\n    return vec3.exactEquals(this, vector3);\n  }\n\n  applyMatrix4(matrix4) {\n    vec3.transformMat4(this, this, matrix4);\n    return this;\n  }\n\n  applyQuaternion(quaternion) {\n    vec3.transformQuat(this, this, quaternion);\n    return this;\n  }\n\n  angle(vector3) {\n    return vec3.angle(this, vector3);\n  }\n\n  clone() {\n    return new Vector3(this);\n  }\n}\n","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as quat from '../../../gl-matrix/esm/quat.js';\nimport * as mat4 from '../../../gl-matrix/esm/mat4.js';\n\nexport default class Quaternion extends Float32Array {\n  constructor(array = [0, 0, 0, 1]) {\n    super(array);\n    return this;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = value;\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = value;\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  set z(value) {\n    this[2] = value;\n  }\n\n  get w() {\n    return this[3];\n  }\n\n  set w(value) {\n    this[3] = value;\n  }\n\n  identity() {\n    quat.identity(this);\n    return this;\n  }\n\n  set(x, y, z, w) {\n    quat.set(this, x, y, z, w);\n    return this;\n  }\n\n  rotateX(angle) {\n    quat.rotateX(this, this, angle);\n    return this;\n  }\n\n  rotateY(angle) {\n    quat.rotateY(this, this, angle);\n    return this;\n  }\n\n  rotateZ(angle) {\n    quat.rotateZ(this, this, angle);\n    return this;\n  }\n\n  invert(quaternion = this) {\n    quat.invert(this, quaternion);\n    return this;\n  }\n\n  copy(quaternion) {\n    quat.copy(this, quaternion);\n    return this;\n  }\n\n  normalize(quaternion = this) {\n    quat.normalize(this, this);\n    return this;\n  }\n\n  multiply(quaternionA, quaternionB) {\n    if (quaternionB) {\n      quat.multiply(this, quaternionA, quaternionB);\n    } else {\n      quat.multiply(this, this, quaternionA);\n    }\n    return this;\n  }\n\n  fromMatrix3(matrix3) {\n    quat.fromMat3(this, matrix3);\n    return this;\n  }\n\n  fromMatrix4(matrix4) {\n    mat4.getRotation(this, matrix4);\n    return this;\n  }\n}\n","import Pointer from '../../input/Pointer.js';\nimport Matrix4 from '../../math/Matrix4.js';\nimport Vector2 from '../../math/Vector2.js';\nimport Vector3 from '../../math/Vector3.js';\nimport Quaternion from '../../math/Quaternion.js';\n\nexport default class TrackballController {\n  constructor({\n    matrix = new Matrix4(),\n    domElement = document.body,\n    distance = 0,\n    invertRotation = true,\n    rotationEaseRatio = .04,\n    zoomSpeed = .1,\n    zoomEaseRatio = .1,\n    minDistance = 0,\n    maxDistance = Infinity,\n    disabled = false,\n  } = {}) {\n    this.matrix = matrix;\n\n    this._distance = distance;\n    this.invertRotation = invertRotation;\n    this.rotationEaseRatio = rotationEaseRatio;\n    this.maxDistance = maxDistance;\n    this.minDistance = minDistance;\n    this.zoomSpeed = zoomSpeed;\n    this.zoomEaseRatio = zoomEaseRatio;\n\n    this._pointer = Pointer.get(domElement);\n    this._nextDistance = this._distance;\n\n    this._cachedQuaternion = new Quaternion();\n    this._cachedMatrix = new Matrix4();\n    this._cachedVector3 = new Vector3();\n\n    this._velocity = new Vector2();\n    this._velocityOrigin = new Vector2();\n\n    this._position = new Vector3([this.matrix.x, this.matrix.y, this.matrix.z]);\n    this._positionPrevious = this._position.clone();\n    this._positionOffset = new Vector3();\n\n    domElement.addEventListener('wheel', this.onWheel.bind(this), { passive: true });\n\n    this.update();\n\n    this.disabled = disabled;\n  }\n\n  set distance(value) {\n    this._distance = this._nextDistance = value;\n  }\n\n  get distance() {\n    return this._distance;\n  }\n\n  onWheel(e) {\n    if (this.disabled) {\n      return;\n    }\n    const scrollOffsetRatio = 1 + Math.abs(e.deltaY * this.zoomSpeed * .01);\n    this._nextDistance = this._nextDistance || 1;\n    this._nextDistance = e.deltaY > 0 ? this._nextDistance * scrollOffsetRatio : this._nextDistance / scrollOffsetRatio;\n    this._nextDistance = Math.max(Math.min(this._nextDistance, this.maxDistance), this.minDistance);\n  }\n\n  update() {\n    if (this.disabled) {\n      return;\n    }\n\n    this._cachedMatrix.identity();\n    this._cachedQuaternion.identity();\n\n    this._distance += (this._nextDistance - this._distance) * this.zoomEaseRatio;\n\n    this._position.set(this.matrix.x, this.matrix.y, this.matrix.z).subtract(this._positionOffset);\n\n    this.matrix.x = 0;\n    this.matrix.y = 0;\n    this.matrix.z = 0;\n\n    if (this._pointer.downed) {\n      this._velocity.copy(this._pointer.velocity).scale(.004);\n    }\n\n    this._velocity.lerp(this._velocityOrigin, this.rotationEaseRatio);\n\n    this._cachedQuaternion.rotateY(this.invertRotation ? -this._velocity.x : this._velocity.x);\n    this._cachedQuaternion.rotateX(this.invertRotation ? -this._velocity.y : this._velocity.y);\n\n    this._cachedMatrix.fromQuaternion(this._cachedQuaternion);\n\n    this.matrix.multiply(this._cachedMatrix);\n\n    this._positionOffset.set(0, 0, 1);\n    this._positionOffset.applyMatrix4(this.matrix);\n    this._positionOffset.scale(this._distance);\n\n    this._cachedVector3.copy(this._position).add(this._positionOffset);\n\n    this.matrix.x = this._cachedVector3.x;\n    this.matrix.y = this._cachedVector3.y;\n    this.matrix.z = this._cachedVector3.z;\n  }\n}\n","import Shader from '../3d/Shader.js';\n\nexport default class BasicShader extends Shader {\n  constructor({\n    positions = true,\n    normals = false,\n    uvs = false,\n    uniforms = undefined,\n    vertexChunks = [],\n    fragmentChunks = [],\n  } = {}) {\n    super({\n      uniforms,\n      vertexChunks: [\n        ['start', `\n          uniform mat4 projectionView;\n          uniform mat4 transform;\n  \n          ${positions ? 'in vec3 position;' : ''}\n          ${normals ? 'in vec3 normal;' : ''}\n          ${uvs ? 'in vec2 uv;' : ''}\n  \n          ${positions ? 'out vec3 vPosition;' : ''}\n          ${normals ? 'out vec3 vNormal;' : ''}\n          ${uvs ? 'out vec2 vUV;' : ''}\n        `],\n        ['main', `\n          ${positions ? 'vPosition = position;' : ''}\n          ${normals ? 'vNormal = normal;' : ''}\n          ${uvs ? 'vUV = uv;' : ''}\n        `],\n        ['end', `\n          gl_Position = projectionView * transform * vec4(position, 1.);\n        `],\n        ...vertexChunks,\n      ],\n      fragmentChunks: [\n        ['start', `\n          ${positions ? 'in vec3 vPosition;' : ''}\n          ${normals ? 'in vec3 vNormal;' : ''}\n          ${uvs ? 'in vec2 vUV;' : ''}\n        `],\n        ...fragmentChunks,\n      ],\n    });\n  }\n}\n","import Camera from '../../../@damienmortini/core/3d/Camera.js';\nimport GLBoxObject from '../../../@damienmortini/core/gl/objects/GLBoxObject.js';\nimport TrackballController from '../../../@damienmortini/core/3d/controller/TrackballController.js';\nimport GLProgram from '../../../@damienmortini/core/gl/GLProgram.js';\nimport BasicShader from '../../../@damienmortini/core/shader/BasicShader.js';\n\nexport default class View {\n  constructor({\n    canvas,\n  }) {\n    this.canvas = canvas;\n\n    const webGLOptions = {\n      depth: true,\n      alpha: false,\n      antialias: true,\n    };\n\n    if (!/\\bforcewebgl1\\b/.test(window.location.search)) {\n      this.gl = this.canvas.getContext('webgl2', webGLOptions);\n    }\n    if (!this.gl) {\n      this.gl = this.canvas.getContext('webgl', webGLOptions) || this.canvas.getContext('experimental-webgl', webGLOptions);\n    }\n\n    this.camera = new Camera();\n\n    this.cameraController = new TrackballController({\n      domElement: this.canvas,\n      matrix: this.camera.transform,\n      distance: 5,\n    });\n\n    this.gl.clearColor(0, 0, 0, 1);\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.enable(this.gl.DEPTH_TEST);\n\n    this.object = new GLBoxObject({\n      gl: this.gl,\n      width: 1,\n      height: 1,\n      normals: true,\n      program: new GLProgram({\n        gl: this.gl,\n        shader: new BasicShader({\n          normals: true,\n          fragmentChunks: [\n            ['end', `\n              fragColor = vec4(vNormal * .5 + .5, 1.);\n            `],\n          ],\n        }),\n      }),\n    });\n  }\n\n  resize(width, height) {\n    this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n    this.camera.aspectRatio = width / height;\n    this.update();\n  }\n\n  update() {\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n\n    this.cameraController.update();\n\n    this.object.draw({\n      uniforms: {\n        projectionView: this.camera.projectionView,\n      },\n    });\n  }\n}\n","import AnimationTickerElement from '../../../@damienmortini/element-animation-ticker/index.js';\n\nimport View from './View.js';\n\n/**\n * Entry point element\n * @hideconstructor\n * @example\n * <starter-gl></starter-gl>\n */\nclass Main extends AnimationTickerElement {\n  constructor() {\n    super();\n\n    this.autoplay = true;\n\n    this._resizeBinded = this.resize.bind(this);\n\n    this.attachShadow({ mode: 'open' }).innerHTML = `\n      <style>\n        :host {\n          display: block;\n          touch-action: none;\n        }\n        \n        canvas {\n          width: 100%;\n          height: 100%;\n          max-height: 100%;\n        }\n      </style>\n      <canvas></canvas>\n    `;\n\n    this.canvas = this.shadowRoot.querySelector('canvas');\n\n    this.view = new View({ canvas: this.canvas });\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('resize', this._resizeBinded);\n    this.resize();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener('resize', this._resizeBinded);\n  }\n\n  resize() {\n    const width = this.canvas.offsetWidth;\n    const height = this.canvas.offsetHeight;\n\n    this.canvas.width = width * window.devicePixelRatio;\n    this.canvas.height = height * window.devicePixelRatio;\n\n    this.view.resize(width, height);\n  }\n\n  update() {\n    this.view.update();\n  }\n}\n\nwindow.customElements.define('starter-gl', Main);\n"],"names":["Signal","Set","[object Object]","super","this","_onceCallbacksMap","Map","value","once","onceCallbackWrapper","args","delete","set","add","get","callback","_updateBinded","_update","bind","time","window","performance","now","reset","document","addEventListener","_previousTime","deltaTime","smoothDeltatime","timeScale","smoothTimeScale","requestAnimationFrame","dispatch","AnimationTickerElement","HTMLElement","noautoplay","update","_pauseFlag","hidden","IntersectionObserver","entries","isIntersecting","entry","observe","hasFocus","__pauseFlag","Ticker","hasAttribute","setAttribute","removeAttribute","paused","ARRAY_TYPE","Float32Array","Array","multiply","out","a","b","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","getRotation","mat","scaling","glMatrix.ARRAY_TYPE","m11","m12","m13","m21","m22","m23","m31","m32","m33","Math","hypot","getScaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","sqrt","y","i","arguments","length","Matrix4","array","x","z","w","m00","m01","m02","m03","m10","m20","m30","copy","mat4.set","vector3","matrix4","v","rad","s","c","sin","cos","matrix4a","matrix4b","mat4.multiply","fov","aspectRatio","near","far","fovy","aspect","nf","f","tan","Infinity","mat4.perspective","quaternion","q","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","Camera","PI","_near","_far","_aspectRatio","_fov","transform","_inverseTransform","_projection","_projectionView","_updateProjection","inverseTransform","invert","projection","projectionView","fromPerspective","Object","defineProperty","prototype","enumerable","BoxMesh","width","height","depth","widthSegments","heightSegments","depthSegments","positions","normals","uvs","indices","indicesArray","verticesArray","normalsArray","uvsArray","numberOfVertices","buildPlane","u","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","ix","iy","vertexCounter","vector","push","d","Uint32Array","Uint16Array","Uint8Array","GLVertexArray","gl","mesh","program","extension","getExtension","createVertexArray","createVertexArrayOES","bindVertexArray","bindVertexArrayOES","_vertexArray","attributes","buffer","unbind","GLTexture","data","target","TEXTURE_2D","level","internalFormat","RGBA8","RGBA","format","type","UNSIGNED_BYTE","minFilter","LINEAR","magFilter","wrapS","CLAMP_TO_EDGE","wrapT","flipY","generateMipmap","_texture","createTexture","_width","_height","_dataWidth","undefined","_dataHeight","_target","_unit","_data","videoWidth","videoHeight","WebGLRenderingContext","texImage2D","_minFilter","texParameteri","TEXTURE_MIN_FILTER","_magFilter","TEXTURE_MAG_FILTER","_wrapS","TEXTURE_WRAP_S","_wrapT","TEXTURE_WRAP_T","_flipY","pixelStorei","UNPACK_FLIP_Y_WEBGL","unit","activeTexture","TEXTURE0","bindTexture","GLBuffer","ARRAY_BUFFER","usage","STATIC_DRAW","_buffer","createBuffer","bufferData","index","offset","size","bindBuffer","bindBufferBase","bindBufferRange","GLVertexAttribute","normalized","stride","count","divisor","_count","_type","_dataType","Float64Array","FLOAT","Int8Array","BYTE","Int16Array","SHORT","Int32Array","INT","UNSIGNED_SHORT","UNSIGNED_INT","GLMesh","_drawElementsInstanced","_drawArraysInstanced","instancedArraysExtension","drawElementsInstancedANGLE","drawArraysInstancedANGLE","drawElementsInstanced","drawArraysInstanced","key","assign","ELEMENT_ARRAY_BUFFER","mode","TRIANGLES","elements","first","instanceCount","drawElements","drawArrays","Shader","string","chunks","chunk","replace","vertex","fragment","vertexChunks","fragmentChunks","uniforms","dataTypeConctructors","Vector2","Vector3","Vector4","Matrix3","Texture","TextureCube","uniformTypes","_dataTypeConctructors","_vertex","addChunks","_fragment","_parseUniforms","name","arrayLength","typeMatch","test","isNaN","fill","map","exec","vectorLength","matrixLength","newUniforms","clear","shaderString","structures","structRegExp","structMemberRegExp","structMatch","structName","structString","structure","structMemberMatch","arrayLengthStr","parseInt","uniformsRegExp","uniformMatch","keys","_createUniform","GLProgram","shader","transformFeedbackVaryings","_shader","_program","createProgram","_attachedShaders","_textureUnits","_vertexAttribDivisor","vertexAttribDivisorANGLE","vertexAttribDivisor","self","Attributes","location","_attributesLocations","getAttribLocation","console","warn","enableVertexAttribArray","HALF_FLOAT","vertexAttribPointer","vertexAttribIPointer","uploadUniform","_uniformLocations","getUniformLocation","uniform1f","uniform2fv","uniform3fv","uniform4fv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniformMatrix3fv","uniformMatrix4fv","startsWith","endsWith","Uniforms","INTERLEAVED_ATTRIBS","_updateShader","VERTEX_SHADER","FRAGMENT_SHADER","vertexShader","fragmentShader","textureUnits","useProgram","source","getParameter","VERSION","results","fragColorName","RegExp","createShader","shaderSource","compileShader","shaderInfoLog","getShaderInfoLog","getShaderParameter","COMPILE_STATUS","lineNumberResults","lineNumber","parseFloat","shaderLines","split","typeName","groupCollapsed","groupEnd","Error","attachedShader","detachShader","deleteShader","attachShader","linkProgram","programInfoLog","getProgramInfoLog","getProgramParameter","LINK_STATUS","use","GLBoxObject","vertexArray","_boundTextures","options","draw","texture","vec","vector2a","vector2b","vec2.set","vector2","vec2.copy","vec2.add","vec2.multiply","squaredSize","vec2.subtract","vec2.negate","vec2.cross","vec2.scale","len","vec2.normalize","distance","matrix3","m","vec2.transformMat3","vec2.transformMat4","p0","p1","sinC","cosC","vec2.rotate","t","ax","ay","vec2.lerp","pointers","Pointer","TOUCH_TYPE","MOUSE_TYPE","domElement","pointer","downed","_downed","_domElement","velocity","dragOffset","centered","centeredFlippedY","normalizedFlippedY","normalizedCentered","normalizedCenteredFlippedY","onDown","onMove","onUp","onClick","onTypeChange","_preventMouseTypeChange","_onPointerMoveBinded","_onPointerMove","_onPointerDownBinded","_onPointerDown","_onPointerUpBinded","_onPointerUp","_resizeBinded","resize","_position","enable","_domElementBoundingRect","left","top","innerWidth","innerHeight","getBoundingClientRect","e","_changeType","_onPointerEvent","_updatePositions","clearTimeout","_timeout","setTimeout","TouchEvent","changedTouches","touches","clientX","clientY","disable","passive","removeEventListener","create","fromValues","normalize","dot","cross","az","bx","by","bz","vec3.set","vec3.copy","vec3.add","vec3.length","vec3.subtract","vec3.negate","vector3a","vector3b","vec3.cross","vec3.scale","vec3.normalize","vec3.dot","vec3.lerp","vec3.transformMat4","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3.transformQuat","mag","cosine","acos","min","max","aw","bw","slerp","omega","cosom","sinom","scale0","scale1","fromMat3","fRoot","fTrace","j","k","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","vec3.create","vec3.fromValues","mat3.create","Quaternion","quat.identity","quat.set","angle","quat.rotateX","quat.rotateY","quat.rotateZ","a0","a1","a2","a3","invDot","quat.invert","quat.copy","quat.normalize","quaternionA","quaternionB","quat.multiply","quat.fromMat3","mat4.getRotation","TrackballController","matrix","body","invertRotation","rotationEaseRatio","zoomSpeed","zoomEaseRatio","minDistance","maxDistance","disabled","_distance","_pointer","_nextDistance","_cachedQuaternion","_cachedMatrix","_cachedVector3","_velocity","_velocityOrigin","_positionPrevious","clone","_positionOffset","onWheel","scrollOffsetRatio","abs","deltaY","identity","subtract","scale","lerp","rotateY","rotateX","fromQuaternion","applyMatrix4","BasicShader","View","canvas","webGLOptions","alpha","antialias","search","getContext","camera","cameraController","clearColor","CULL_FACE","DEPTH_TEST","object","viewport","drawingBufferWidth","drawingBufferHeight","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","customElements","define","autoplay","attachShadow","innerHTML","shadowRoot","querySelector","view","connectedCallback","disconnectedCallback","offsetWidth","offsetHeight","devicePixelRatio"],"mappings":"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"}