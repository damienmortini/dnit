import e from"../../../../../../../../node_modules/@damienmortini/element-animation-ticker/index.js";import t from"../../../../../../../../node_modules/@damienmortini/core/3d/Camera.js";import i from"../../../../../../../../node_modules/@damienmortini/core/gl/objects/GLBoxObject.js";import s from"../../../../../../../../node_modules/@damienmortini/core/3d/controllers/TrackballController.js";import n from"../../../../../../../../node_modules/@damienmortini/core/gl/GLProgram.js";import a from"../../../../../../../../node_modules/@damienmortini/core/shader/BasicShader.js";class o{constructor({canvas:e}){this.canvas=e;const o={depth:!0,alpha:!1,antialias:!0};/\bforcewebgl1\b/.test(window.location.search)||(this.gl=this.canvas.getContext("webgl2",o)),this.gl||(this.gl=this.canvas.getContext("webgl",o)||this.canvas.getContext("experimental-webgl",o)),this.camera=new t,this.cameraController=new s({domElement:this.canvas,matrix:this.camera.transform,distance:5}),this.gl.clearColor(0,0,0,1),this.gl.enable(this.gl.CULL_FACE),this.gl.enable(this.gl.DEPTH_TEST),this.object=new i({gl:this.gl,width:1,height:1,normals:!0,program:new n({gl:this.gl,shader:new a({normals:!0,fragmentChunks:[["end","\n              fragColor = vec4(vNormal * .5 + .5, 1.);\n            "]]})})})}resize(e,t){this.gl.viewport(0,0,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight),this.camera.aspectRatio=e/t,this.update()}update(){this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT),this.cameraController.update(),this.object.draw({uniforms:{projectionView:this.camera.projectionView}})}}window.customElements.define("starter-gl",class extends e{constructor(){super(),this.autoplay=!0,this._resizeBinded=this.resize.bind(this),this.attachShadow({mode:"open"}).innerHTML="\n      <style>\n        :host {\n          display: block;\n          touch-action: none;\n        }\n        \n        canvas {\n          width: 100%;\n          height: 100%;\n          max-height: 100%;\n        }\n      </style>\n      <canvas></canvas>\n    ",this.canvas=this.shadowRoot.querySelector("canvas"),this.view=new o({canvas:this.canvas})}connectedCallback(){super.connectedCallback(),window.addEventListener("resize",this._resizeBinded),this.resize()}disconnectedCallback(){super.disconnectedCallback(),window.removeEventListener("resize",this._resizeBinded)}resize(){const e=this.canvas.offsetWidth,t=this.canvas.offsetHeight;this.canvas.width=e*window.devicePixelRatio,this.canvas.height=t*window.devicePixelRatio,this.view.resize(e,t)}update(){this.view.update()}});