import e from"../../../../../../../../node_modules/@damienmortini/element-animation-ticker/index.js";import{WebGLRenderer as s}from"../../../../../../../../node_modules/three/src/renderers/WebGLRenderer.js";import{Scene as n}from"../../../../../../../../node_modules/three/src/scenes/Scene.js";import{PerspectiveCamera as r}from"../../../../../../../../node_modules/three/src/cameras/PerspectiveCamera.js";import{Mesh as t}from"../../../../../../../../node_modules/three/src/objects/Mesh.js";import{BoxGeometry as i}from"../../../../../../../../node_modules/three/src/geometries/BoxGeometry.js";import{MeshNormalMaterial as a}from"../../../../../../../../node_modules/three/src/materials/MeshNormalMaterial.js";import o from"../../../../../../../../node_modules/@damienmortini/three/controller/THREETrackballController.js";class c extends n{constructor({canvas:e}){super(),this.camera=new r(65,window.innerWidth/window.innerHeight,.1,1e4),this.controls=new o(this.camera,{distance:5,domElement:e});const s=new t(new i(1,1,1),new a);this.add(s)}resize(e,s){this.camera.aspect=e/s,this.camera.updateProjectionMatrix()}update(){this.controls.update()}}window.customElements.define("starter-three",class extends e{constructor(){super(),this.attachShadow({mode:"open"}).innerHTML="\n      <style>\n        :host {\n          display: block;\n        }\n        \n        canvas {\n          width: 100%;\n          height: 100%;\n          max-height: 100%;\n        }\n      </style>\n      <canvas></canvas>\n    ",this.canvas=this.shadowRoot.querySelector("canvas"),void 0===window.WebGL2RenderingContext||/\bforcewebgl1\b/.test(window.location.search)?this.renderer=new s({canvas:this.canvas,powerPreference:"high-performance",antialias:!0}):this.renderer=new s({canvas:this.canvas,context:this.canvas.getContext("webgl2",{alpha:!1,powerPreference:"high-performance",antialias:!0})}),/\bdev\b/.test(window.location.search)&&(this.renderer.debug.checkShaderErrors=!0),this.renderer.setPixelRatio(window.devicePixelRatio),this.scene=new c({canvas:this.canvas})}connectedCallback(){super.connectedCallback(),window.addEventListener("resize",this._resizeBinded=this.resize.bind(this)),this.resize()}disconnectedCallback(){super.disconnectedCallback(),window.removeEventListener("resize",this._resizeBinded)}resize(){const e=this.canvas.offsetWidth,s=this.canvas.offsetHeight;this.scene.resize(e,s),this.renderer.setSize(e,s,!1),this.renderer.render(this.scene,this.scene.camera)}update(){this.scene.update(),this.renderer.render(this.scene,this.scene.camera)}});